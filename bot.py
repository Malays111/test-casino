from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from config import TELEGRAM_TOKEN, DEPOSIT_AMOUNTS, CASINO_NAME, DUEL_FAQ_URL, DICE_FAQ_URL, BASKETBALL_FAQ_URL, SLOTS_FAQ_URL, BLACKJACK_FAQ_URL, DARTS_FAQ_URL, BACKGROUND_IMAGE_URL, ADMIN_IDS, REFERRAL_BONUS, REFERRAL_MIN_DEPOSIT, DAILY_TASKS, GROUPS, WEBHOOK_URL

# URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
WIN_IMAGE_URL = "https://www.dropbox.com/scl/fi/7g0gaxdpd9yib3njcvknv/winsvanish.png?rlkey=gkm3ifwgtlndkelab9mqla57h&st=ym57ciur&dl=0"
LOSE_IMAGE_URL = "https://www.dropbox.com/scl/fi/7djvu9ovgiy5yxgx8wi3i/losevanish.png?rlkey=1tjmth9haf4dcjnnfcba6kyt3&st=p10ekrvb&dl=0"
from async_database import async_db
from crypto_bot import crypto_bot
import asyncio
import random
import time
from datetime import date, datetime

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
dp = None
results_group_id = None  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
vip_group_id = None  # ID VIP –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–ø–ª–∞—Ç

# –ö—ç—à —Ç–æ–ø–æ–≤
top_deposited_cache = []
top_spent_cache = []
top_referrals_cache = []
last_cache_update = 0
CACHE_UPDATE_INTERVAL = 120  # 2 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
top_cache_lock = asyncio.Lock()  # –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions

# –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balance_cache = {}
user_cache_expiry = {}
BALANCE_CACHE_TTL = 30  # 30 —Å–µ–∫—É–Ω–¥
balance_cache_lock = asyncio.Lock()  # –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions

# –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_stats_cache = {}
user_stats_cache_expiry = {}
STATS_CACHE_TTL = 60  # 60 —Å–µ–∫—É–Ω–¥
stats_cache_lock = asyncio.Lock()  # –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions

# Rate limiting –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
daily_bonus_attempts = {}
DAILY_BONUS_COOLDOWN = 0  # –£–±—Ä–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞

# Rate limiting –¥–ª—è –∫–æ–º–∞–Ω–¥
command_rate_limits = {}
COMMAND_COOLDOWN = 0.0  # –£–±—Ä–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞

# Rate limiting –¥–ª—è callback
callback_rate_limits = {}
CALLBACK_COOLDOWN = 0.0  # –£–±—Ä–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞

async def check_command_rate_limit(user_id, command):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è –∫–æ–º–∞–Ω–¥"""
    current_time = time.time()
    key = f"{user_id}_{command}"

    last_use = command_rate_limits.get(key, 0)
    if current_time - last_use < COMMAND_COOLDOWN:
        return False

    command_rate_limits[key] = current_time
    return True

async def check_callback_rate_limit(user_id, callback_data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è callback"""
    current_time = time.time()
    key = f"{user_id}_{callback_data}"

    last_use = callback_rate_limits.get(key, 0)
    if current_time - last_use < CALLBACK_COOLDOWN:
        return False

    callback_rate_limits[key] = current_time
    return True

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã
group_message_queue = asyncio.Queue()
group_message_lock = asyncio.Lock()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø—É (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
async def send_game_result_to_group(game_name, username, bet, result_text, winnings_label, winnings):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø—É"""
    if not results_group_id:
        return

    try:
        group_text = f"""üìé –ò–≥—Ä–∞: {game_name}
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}
üí≤ {winnings_label}: {winnings}"""

        photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        asyncio.create_task(
            bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º async_db –Ω–∞–ø—Ä—è–º—É—é)
async def async_get_user(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    return await async_db.get_user(telegram_id)

async def async_get_user_by_username(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–∑ –ë–î"""
    return await async_db.get_user_by_username(username)

async def async_create_user(telegram_id, username, referrer_id=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    await async_db.create_user(telegram_id, username, referrer_id)

async def async_update_balance(telegram_id, amount):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await async_db.update_balance(telegram_id, amount)

async def async_update_referral_balance(telegram_id, amount):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    await async_db.update_referral_balance(telegram_id, amount)

async def async_get_top_deposited(limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º"""
    return await async_db.get_top_deposited(limit)

async def async_get_top_spent(limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ —Ç—Ä–∞—Ç–∞–º"""
    return await async_db.get_top_spent(limit)

async def async_get_top_referrals(limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º"""
    return await async_db.get_top_referrals(limit)

async def async_load_all_game_settings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä"""
    return await async_db.load_all_game_settings()

async def async_save_game_setting(key, value):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã"""
    await async_db.save_game_setting(key, value)

async def async_save_setting(key, value):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await async_db.save_setting(key, value)

async def async_create_withdrawal(user_id, amount, wallet_address):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
    return await async_db.create_withdrawal(user_id, amount, wallet_address)

async def async_update_withdrawal_status(withdrawal_id, status, transfer_id=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞"""
    await async_db.update_withdrawal_status(withdrawal_id, status, transfer_id)

async def async_create_promo_code(code, reward_amount, max_activations, expires_at, created_by):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    return await async_db.create_promo_code(code, reward_amount, max_activations, expires_at, created_by)

async def async_get_promo_code(code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ –∫–æ–¥—É"""
    return await async_db.get_promo_code(code)

async def async_activate_promo_code(promo_code_id, user_id):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return await async_db.activate_promo_code(promo_code_id, user_id)

async def async_get_all_promo_codes():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    return await async_db.get_all_promo_codes()

async def async_log_action(telegram_id, action, amount=0, reason=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await async_db.log_action(telegram_id, action, amount, reason)

async def async_get_user_logs(telegram_id=None, limit=50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await async_db.get_user_logs(telegram_id, limit)

async def async_get_user_stats(limit=50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ async_db
    users = []
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ async_db –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    result = await asyncio.to_thread(async_db._execute_query,
        "SELECT username, balance, referral_count FROM users ORDER BY balance DESC LIMIT ?",
        (limit,), fetchall=True)
    return result

async def async_get_user_logs_by_username(username=None, limit=50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ username"""
    if not username:
        return await async_get_user_logs(limit=limit)
    # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ username —á–µ—Ä–µ–∑ async_db
    user = await async_get_user(username)
    if user:
        telegram_id = user[1]  # telegram_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ user[1]
        return await async_get_user_logs(telegram_id, limit)
    else:
        return []

async def async_get_payment_by_invoice(invoice_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ invoice_id"""
    return await async_db.get_payment_by_invoice(invoice_id)

async def async_get_telegram_id_by_user_id(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ telegram_id –ø–æ user_id"""
    return await async_db.get_telegram_id_by_user_id(user_id)

async def async_get_pending_payments(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ pending –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await async_db.get_pending_payments(telegram_id)

async def async_get_payment_amount_by_invoice(invoice_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –ø–æ invoice_id"""
    return await async_db.get_payment_amount_by_invoice(invoice_id)

async def async_get_setting(key, default_value=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return await async_db.get_setting(key, default_value)

async def async_update_games_played(telegram_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä"""
    await async_db.update_games_played(telegram_id)

async def async_update_payment_status(invoice_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await async_db.update_payment_status(invoice_id, status)

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def auto_check_payments():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å pending –ø–ª–∞—Ç–µ–∂–∞–º–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å pending –ø–ª–∞—Ç–µ–∂–∞–º–∏
            pending_users = await asyncio.to_thread(
                async_db._execute_query,
                "SELECT DISTINCT u.telegram_id FROM users u JOIN payments p ON u.id = p.user_id WHERE p.status = 'pending'",
                fetchall=True
            )

            if pending_users:
                for (telegram_id,) in pending_users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await check_pending_payments(telegram_id)
                    except Exception as e:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

            # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(3)

        except Exception as e:
            await asyncio.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def preload_data():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    global top_deposited_cache, top_spent_cache, top_referrals_cache, last_cache_update

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø—ã —Å—Ä–∞–∑—É
        async with top_cache_lock:
            top_deposited_cache = await async_get_top_deposited(5)
            top_spent_cache = await async_get_top_spent(5)
            top_referrals_cache = await async_get_top_referrals(5)
            last_cache_update = time.time()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä
        global settings
        settings = await async_load_all_game_settings()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É rate limiting –∫—ç—à–∞
        asyncio.create_task(cleanup_rate_limit_cache())

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã
        asyncio.create_task(process_group_message_queue())

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        asyncio.create_task(auto_check_payments())

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è CryptoBot (–µ—Å–ª–∏ URL —É–∫–∞–∑–∞–Ω)
        if WEBHOOK_URL:
            try:
                print(f"üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {WEBHOOK_URL}")
                webhook_result = crypto_bot.set_webhook(WEBHOOK_URL)
                if webhook_result:
                    print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ç–æ–ø–æ–≤
async def update_top_cache():
    global top_deposited_cache, top_spent_cache, top_referrals_cache, last_cache_update
    while True:
        current_time = time.time()
        if current_time - last_cache_update >= CACHE_UPDATE_INTERVAL:
            async with top_cache_lock:
                top_deposited_cache = await async_get_top_deposited(5)
                top_spent_cache = await async_get_top_spent(5)
                top_referrals_cache = await async_get_top_referrals(5)
                last_cache_update = current_time
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–æ–≤ –∏–∑ –∫—ç—à–∞
async def get_cached_tops():
    global top_deposited_cache, top_spent_cache, top_referrals_cache, last_cache_update
    current_time = time.time()
    if current_time - last_cache_update >= CACHE_UPDATE_INTERVAL:
        # –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with top_cache_lock:
            top_deposited_cache = await async_get_top_deposited(5)
            top_spent_cache = await async_get_top_spent(5)
            top_referrals_cache = await async_get_top_referrals(5)
            last_cache_update = current_time
    return top_deposited_cache, top_spent_cache, top_referrals_cache

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –∫—ç—à–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
async def get_cached_balance(user_id):
    async with balance_cache_lock:
        global user_balance_cache, user_cache_expiry
        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
        expired_users = [uid for uid, expiry in user_cache_expiry.items() if current_time > expiry]
        for uid in expired_users:
            user_balance_cache.pop(uid, None)
            user_cache_expiry.pop(uid, None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id in user_balance_cache and current_time <= user_cache_expiry.get(user_id, 0):
            return user_balance_cache[user_id]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä—É–µ–º
        user_data = await async_get_user(user_id)
        if user_data:
            balance = round(float(user_data[3]), 2) if user_data[3] is not None else 0
            referral_balance = round(float(user_data[5]), 2) if user_data[5] is not None else 0
            user_balance_cache[user_id] = (balance, referral_balance)
            user_cache_expiry[user_id] = current_time + BALANCE_CACHE_TTL
            return balance, referral_balance

        return 0, 0

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∫—ç—à–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
async def get_cached_user_stats(user_id):
    async with stats_cache_lock:
        global user_stats_cache, user_stats_cache_expiry
        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
        expired_users = [uid for uid, expiry in user_stats_cache_expiry.items() if current_time > expiry]
        for uid in expired_users:
            user_stats_cache.pop(uid, None)
            user_stats_cache_expiry.pop(uid, None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id in user_stats_cache and current_time <= user_stats_cache_expiry.get(user_id, 0):
            return user_stats_cache[user_id]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä—É–µ–º
        user_data = await async_get_user(user_id)
        if user_data:
            username = user_data[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"
            balance = round(float(user_data[3]), 2) if user_data[3] is not None else 0
            referral_count = user_data[4] if user_data[4] is not None else 0
            referral_balance = round(float(user_data[5]), 2) if user_data[5] is not None else 0
            total_deposited = round(float(user_data[6]), 2) if user_data[6] is not None else 0
            total_spent = round(float(user_data[7]), 2) if user_data[7] is not None else 0
            games_played = user_data[8] if user_data[8] is not None else 0
            created_at = user_data[12] if len(user_data) > 12 and user_data[12] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            net_profit = total_deposited - total_spent
            win_rate = 0
            if games_played > 0:
                win_rate = min(100, max(0, (balance + total_spent - total_deposited) / max(1, total_spent) * 100))
            avg_bet = total_spent / max(1, games_played)
            profit_per_game = (total_deposited - total_spent) / max(1, games_played)

            stats = {
                'username': username,
                'balance': balance,
                'referral_count': referral_count,
                'referral_balance': referral_balance,
                'total_deposited': total_deposited,
                'total_spent': total_spent,
                'games_played': games_played,
                'created_at': created_at,
                'net_profit': net_profit,
                'win_rate': win_rate,
                'avg_bet': avg_bet,
                'profit_per_game': profit_per_game
            }

            user_stats_cache[user_id] = stats
            user_stats_cache_expiry[user_id] = current_time + STATS_CACHE_TTL
            return stats

        return None

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
async def invalidate_balance_cache(user_id):
    async with balance_cache_lock:
        global user_balance_cache, user_cache_expiry
        user_balance_cache.pop(user_id, None)
        user_cache_expiry.pop(user_id, None)

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
async def invalidate_stats_cache(user_id):
    async with stats_cache_lock:
        global user_stats_cache, user_stats_cache_expiry
        user_stats_cache.pop(user_id, None)
        user_stats_cache_expiry.pop(user_id, None)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è
def get_daily_task():
    today = date.today()
    day_index = (today.toordinal() - date(2025, 9, 19).toordinal()) % len(DAILY_TASKS)
    return DAILY_TASKS[day_index]

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ rate limiting –∫—ç—à–∞
async def cleanup_rate_limit_cache():
    while True:
        current_time = time.time()
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
        expired_users = [uid for uid, timestamp in daily_bonus_attempts.items()
                        if current_time - timestamp > 300]
        for uid in expired_users:
            del daily_bonus_attempts[uid]

        # –û—á–∏—â–∞–µ–º –æ–±—â–∏–π rate limiting –∫—ç—à –∫–æ–º–∞–Ω–¥
        expired_commands = [key for key, timestamp in command_rate_limits.items()
                           if current_time - timestamp > 300]
        for key in expired_commands:
            del command_rate_limits[key]

        await asyncio.sleep(300)  # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã
async def process_group_message_queue():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            message_data = await group_message_queue.get()

            if message_data['type'] == 'game_result':
                group_id = message_data['group_id']
                photo_url = message_data['photo_url']
                caption = message_data['caption']

                try:
                    await bot.send_photo(chat_id=group_id, photo=photo_url, caption=caption)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

            elif message_data['type'] == 'withdrawal_result':
                group_id = message_data['group_id']
                text = message_data['text']

                try:
                    await bot.send_message(chat_id=group_id, text=text)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ VIP –≥—Ä—É–ø–ø—É {group_id}: {e}")

            group_message_queue.task_done()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
async def queue_group_message(message_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
    await group_message_queue.put(message_data)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
def check_daily_task_completion(user_data, task):
    if task["type"] == "referrals":
        return user_data[4] >= task["target"]  # referral_count
    elif task["type"] == "spent":
        return user_data[7] >= task["target"]  # total_spent
    elif task["type"] == "deposited":
        return user_data[6] >= task["target"]  # total_deposited
    elif task["type"] == "games":
        return user_data[8] >= task["target"]  # games_played
    return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def load_initial_settings():
    global settings, results_group_id, vip_group_id
    try:
        settings = await async_load_all_game_settings()
        results_group_id_raw = await async_get_setting('results_group_id')
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î results_group_id: '{results_group_id_raw}', type: {type(results_group_id_raw)}")
        if results_group_id_raw:
            try:
                results_group_id = int(results_group_id_raw)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_group_id}")
            except ValueError:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è results_group_id: {results_group_id_raw}")
                results_group_id = None
        else:
            print("‚ùå –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            print("üìã –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä –≤ –≥—Ä—É–ø–ø—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
            print("   /setgroup <ID_–≥—Ä—É–ø–ø—ã>")
            print("   –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            results_group_id = None

        # –ó–∞–≥—Ä—É–∑–∫–∞ ID VIP –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        vip_group_id_raw = await async_get_setting('vip_group_id')
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î vip_group_id: '{vip_group_id_raw}', type: {type(vip_group_id_raw)}")
        if vip_group_id_raw:
            try:
                vip_group_id = int(vip_group_id_raw)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ VIP –≥—Ä—É–ø–ø–∞: {vip_group_id}")
            except ValueError:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è vip_group_id: {vip_group_id_raw}")
                vip_group_id = None
        else:
            print("‚ùå VIP –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            print("üíé –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–ª–∞—Ç –≤ VIP –≥—Ä—É–ø–ø—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
            print("   /setvip <ID_VIP_–≥—Ä—É–ø–ø—ã>")
            print("   –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –Ω—É–∂–Ω–æ–π VIP –≥—Ä—É–ø–ø–µ")
            vip_group_id = None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
settings = {}

# –®–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
DUEL_WIN_CHANCE = settings.get('duel_win_chance', 25.0)
DICE_WIN_CHANCE = settings.get('dice_win_chance', 30.0)
BASKETBALL_WIN_CHANCE = settings.get('basketball_win_chance', 10.0)
SLOTS_WIN_CHANCE = settings.get('slots_win_chance', 15.0)
BLACKJACK_WIN_CHANCE = settings.get('blackjack_win_chance', 40.0)

# –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã—à–∞
DUEL_MULTIPLIER = settings.get('duel_multiplier', 1.8)
DICE_MULTIPLIER = settings.get('dice_multiplier', 5.0)
BASKETBALL_MULTIPLIER = settings.get('basketball_multiplier', 1.5)
SLOTS_MULTIPLIER = settings.get('slots_multiplier', 8.0)
BLACKJACK_MULTIPLIER = settings.get('blackjack_multiplier', 2.0)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DepositStates(StatesGroup):
    waiting_for_amount = State()

class DuelStates(StatesGroup):
    waiting_for_bet = State()

class DiceStates(StatesGroup):
    waiting_for_number = State()
    waiting_for_bet = State()

class AdminStates(StatesGroup):
    waiting_for_duel_chance = State()
    waiting_for_dice_chance = State()
    waiting_for_basketball_chance = State()
    waiting_for_slots_chance = State()
    waiting_for_blackjack_chance = State()
    waiting_for_duel_multiplier = State()
    waiting_for_dice_multiplier = State()
    waiting_for_basketball_multiplier = State()
    waiting_for_slots_multiplier = State()
    waiting_for_blackjack_multiplier = State()

class WithdrawStates(StatesGroup):
    waiting_for_wallet_address = State()
    waiting_for_withdraw_amount = State()

class PromoStates(StatesGroup):
    waiting_for_promo_code = State()
    waiting_for_promo_amount = State()
    waiting_for_promo_max_activations = State()
    waiting_for_promo_expires = State()

class BasketballStates(StatesGroup):
    waiting_for_bet = State()

class SlotsStates(StatesGroup):
    waiting_for_bet = State()

class BlackjackStates(StatesGroup):
    waiting_for_bet = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play"),
            InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
            InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
        ],
        [
            InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus"),
            InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø—ã", callback_data="groups")
        ],
        [InlineKeyboardButton(text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_codes")]
    ])
    return keyboard

def get_admin_panel():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –®–∞–Ω—Å—ã", callback_data="admin_chances")],
        [InlineKeyboardButton(text="‚ö° –ú–Ω–æ–∂–∏—Ç–µ–ª—å", callback_data="admin_multiplier")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_set_balance")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def get_deposit_menu():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    return keyboard

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
def get_back_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    return keyboard

# –ú–µ–Ω—é –∏–≥—Ä
def get_games_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="game_duel"),
            InlineKeyboardButton(text="üéÅ –ö—É–±–∏–∫–∏–∏", callback_data="game_dice"),
            InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="game_basketball")
        ],
        [
            InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="game_slots"),
            InlineKeyboardButton(text="üÉè BlackJack", callback_data="game_blackjack"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    return keyboard

def get_deposit_back_button():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    return keyboard

# –ú–µ–Ω—é –≥—Ä—É–ø–ø
def get_groups_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• {group['name']}", url=group['url'])] for group in GROUPS
    ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    return keyboard

# –ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def get_promo_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_promo")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

async def get_welcome_text(user):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
    balance, referral_balance = await get_cached_balance(user.id)
    print(f"cached balance for {user.id}: balance={balance}, referral={referral_balance}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if user.username:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, @<b><u>{user.username}</u></b> !"
    elif user.first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>!"
    else:
        greeting = "–ü—Ä–∏–≤–µ—Ç!"

    print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: –æ—Å–Ω–æ–≤–Ω–æ–π {balance}, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π {referral_balance}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è
    task = get_daily_task()

    welcome_text = f"""<b>üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>
  <blockquote>{task['description']} - –ù–∞–≥—Ä–∞–¥–∞: {task['reward']}$</blockquote>

  {greeting} —Ç—ã –ø–æ–ø–∞–ª –≤ <b> {CASINO_NAME} </b> ‚Äî –°–∞–º–æ–µ –ª—É—á—à–µ–µ –∫–∞–∑–∏–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ ‚ô•Ô∏è
  üçÄ–ë–∞–ª–∞–Ω—Å: {balance}$
  ‚ö°–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {referral_balance}$ """

    return welcome_text, "HTML"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∏ /restart
async def start_command(message: types.Message):
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    args = message.text.split()
    referrer_id = None
    if len(args) > 1 and args[1].isdigit():
        potential_referrer_id = int(args[1])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
        if potential_referrer_id != user.id:
            referrer_id = potential_referrer_id

    await async_create_user(user.id, user.username, referrer_id)

    welcome_text, parse_mode = await get_welcome_text(user)
    await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=welcome_text, reply_markup=get_main_menu(), parse_mode=parse_mode)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /give –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def give_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    # Rate limiting
    if not await check_command_rate_limit(message.from_user.id, 'give'):
        await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give @username amount –∏–ª–∏ /give telegram_id amount\n–ü—Ä–∏–º–µ—Ä: /give @testuser 10.5 –∏–ª–∏ /give 123456789 10.5")
        return

    identifier = args[1]
    telegram_id = None
    username = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, username –∏–ª–∏ telegram_id
    if identifier.isdigit():
        telegram_id = int(identifier)
    else:
        username = identifier
        if username.startswith('@'):
            username = username[1:]  # –£–±—Ä–∞—Ç—å @

    try:
        amount = float(args[2])
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
        return

    # –ù–∞–π—Ç–∏ user
    try:
        if telegram_id:
            user_data = await async_get_user(telegram_id)
        else:
            user_data = await async_get_user_by_username(username)
        if not user_data:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_telegram_id = user_data[1]  # telegram_id
        user_username = user_data[2] or f"ID:{user_telegram_id}"  # username

        await async_update_balance(user_telegram_id, amount)
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –¥–µ–Ω–µ–≥ –∞–¥–º–∏–Ω–æ–º
        await async_log_action(user_telegram_id, "admin_give", amount, f"–í—ã–¥–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
        await message.reply(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_username}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /stats –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def stats_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    # Rate limiting
    if not await check_command_rate_limit(message.from_user.id, 'stats'):
        await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    try:
        users = await async_get_user_stats(limit=50)

        if not users:
            await message.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for i, (username, balance, referral_count) in enumerate(users, 1):
            username = username or f"User{i}"
            balance = round(float(balance), 2) if balance is not None else 0
            referral_count = referral_count or 0
            stats_text += f"{i}. @{username} - –ë–∞–ª–∞–Ω—Å: {balance}$ - –†–µ—Ñ–µ—Ä–∞–ª—ã: {referral_count}\n"

        await message.reply(stats_text)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /set –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def set_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set @username amount –∏–ª–∏ /set telegram_id amount\n–ü—Ä–∏–º–µ—Ä: /set @testuser 500 –∏–ª–∏ /set 123456789 500")
        return

    identifier = args[1]
    telegram_id = None
    username = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, username –∏–ª–∏ telegram_id
    if identifier.isdigit():
        telegram_id = int(identifier)
    else:
        username = identifier
        if username.startswith('@'):
            username = username[1:]  # –£–±—Ä–∞—Ç—å @

    try:
        amount = float(args[2])
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
        return

    # –ù–∞–π—Ç–∏ user
    try:
        if telegram_id:
            user_data = await async_get_user(telegram_id)
        else:
            user_data = await async_get_user_by_username(username)
        if not user_data:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_telegram_id = user_data[1]  # telegram_id
        current_balance = user_data[3]  # balance
        user_username = user_data[2] or f"ID:{user_telegram_id}"  # username

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (amount - current_balance –¥–∞—Å—Ç –Ω—É–∂–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É)
        balance_diff = amount - (current_balance if current_balance is not None else 0)
        await async_update_balance(user_telegram_id, balance_diff)
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–æ–º
        await async_log_action(user_telegram_id, "admin_set_balance", balance_diff, f"–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.id} –Ω–∞ {amount}$")
        await message.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}$")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /panel –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def panel_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    panel_text = """üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º:</b>
‚Ä¢ <code>/give @username 10.5</code> - –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚Ä¢ <code>/set @username 500</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

<b>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏:</b>
‚Ä¢ <code>/panel</code> - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ <code>/stats</code> - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ <code>/tasks</code> - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

<b>üë• –ì—Ä—É–ø–ø—ã:</b>
‚Ä¢ <code>/setgroup 123456789</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ <code>/setvip 123456789</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VIP –≥—Ä—É–ø–ø—É –¥–ª—è –≤—ã–ø–ª–∞—Ç
‚Ä¢ <code>/getgroup</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
‚Ä¢ <code>/getvip</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é VIP –≥—Ä—É–ø–ø—É

<b>üîó Webhook:</b>
‚Ä¢ <code>/setwebhook https://example.com/api/webhook</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å URL –¥–ª—è webhook
‚Ä¢ <code>/getwebhook</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π webhook URL

<b>üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>
‚Ä¢ <code>/createpromo WELCOME 5.0 100</code> - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
‚Ä¢ <code>/listpromo</code> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

<b>üí° –®–∞–±–ª–æ–Ω—ã –∫–æ–º–∞–Ω–¥:</b>
‚Ä¢ –í—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥: <code>/give @username —Å—É–º–º–∞</code>
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞: <code>/set @username —Å—É–º–º–∞</code>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: <code>/createpromo –ö–û–î –°–£–ú–ú–ê –ú–ê–ö–°_–ê–ö–¢–ò–í–ê–¶–ò–ô</code>
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä—É–ø–ø—ã: <code>/setgroup ID_–ì–†–£–ü–ü–´</code>
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: <code>/setwebhook URL</code>"""

    await message.reply(panel_text, reply_markup=get_admin_panel(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /tasks –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
async def tasks_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    tasks_text = "üìã –°–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n"
    for i, task in enumerate(DAILY_TASKS, 1):
        tasks_text += f"{i}. {task['description']} - –ù–∞–≥—Ä–∞–¥–∞: {task['reward']}$\n"

    await message.reply(tasks_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /setgroup –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def setgroup_command(message: types.Message):
    global results_group_id
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ chat.id –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    args = message.text.split()
    if len(args) > 1:
        try:
            group_id = int(args[1])
            results_group_id = group_id
            await async_save_setting('results_group_id', str(group_id))
            print(f"–ì—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {group_id}")
            await message.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {group_id}")
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã")
    elif message.chat.type in ['group', 'supergroup']:
        results_group_id = message.chat.id
        await async_save_setting('results_group_id', str(message.chat.id))
        print(f"–ì—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞: {message.chat.id}")
        await message.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.chat.id}")
    else:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setgroup <group_id> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /setvip –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ VIP –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç
async def setvip_command(message: types.Message):
    global vip_group_id
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ chat.id –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    args = message.text.split()
    if len(args) > 1:
        try:
            group_id = int(args[1])
            vip_group_id = group_id
            result = await async_save_setting('vip_group_id', str(group_id))
            print(f"VIP –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {group_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result}")
            await message.reply(f"‚úÖ VIP –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {group_id}")
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã")
    elif message.chat.type in ['group', 'supergroup']:
        vip_group_id = message.chat.id
        result = await async_save_setting('vip_group_id', str(message.chat.id))
        print(f"VIP –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞: {message.chat.id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result}")
        await message.reply(f"‚úÖ VIP –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.chat.id}")
    else:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setvip <group_id> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /getgroup –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
async def getgroup_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if results_group_id:
        await message.reply(f"üìã –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_group_id}")
    else:
        await message.reply("‚ùå –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /getvip –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π VIP –≥—Ä—É–ø–ø—ã
async def getvip_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if vip_group_id:
        await message.reply(f"üíé –¢–µ–∫—É—â–∞—è VIP –≥—Ä—É–ø–ø–∞: {vip_group_id}")
    else:
        await message.reply("‚ùå VIP –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /getgroups –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
async def getgroups_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    response = "üìã <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø:</b>\n\n"

    if results_group_id:
        response += f"üìä –ì—Ä—É–ø–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: <code>{results_group_id}</code>\n"
    else:
        response += "üìä –ì—Ä—É–ø–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: <i>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</i>\n"

    if vip_group_id:
        response += f"üíé VIP –≥—Ä—É–ø–ø–∞: <code>{vip_group_id}</code>\n"
    else:
        response += "üíé VIP –≥—Ä—É–ø–ø–∞: <i>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</i>\n"

    response += "\nüí° <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    response += "‚Ä¢ <code>/setgroup <ID></code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
    response += "‚Ä¢ <code>/setvip <ID></code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VIP –≥—Ä—É–ø–ø—É\n"
    response += "‚Ä¢ <code>/getgroups</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

    await message.reply(response, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /setwebhook –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL
async def setwebhook_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    args = message.text.split()
    if len(args) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setwebhook <URL>\n–ü—Ä–∏–º–µ—Ä: /setwebhook https://example.com/api/webhook")
        return

    webhook_url = args[1]

    try:
        result = crypto_bot.set_webhook(webhook_url)
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ config
            import config
            config.WEBHOOK_URL = webhook_url

            await message.reply(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /getwebhook –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ webhook
async def getwebhook_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if WEBHOOK_URL:
        await message.reply(f"üîó –¢–µ–∫—É—â–∏–π webhook URL: {WEBHOOK_URL}")
    else:
        await message.reply("‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /createpromo –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def createpromo_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    args = message.text.split()
    if len(args) != 4:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createpromo <–∫–æ–¥> <—Å—É–º–º–∞> <–º–∞–∫—Å_–∞–∫—Ç–∏–≤–∞—Ü–∏–π>\n–ü—Ä–∏–º–µ—Ä: /createpromo WELCOME 5.0 100")
        return

    code = args[1].upper()
    try:
        reward_amount = float(args[2])
        max_activations = int(args[3])
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
        return

    if reward_amount <= 0 or max_activations <= 0:
        await message.reply("‚ùå –°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    promo_id = await async_create_promo_code(code, reward_amount, max_activations, None, message.from_user.id)

    if promo_id:
        await message.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\nüé´ –ö–æ–¥: <code>{code}</code>\nüí∞ –°—É–º–º–∞: {reward_amount}$\nüî¢ –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {max_activations}", parse_mode="HTML")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /listpromo –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async def listpromo_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    promo_codes = await async_get_all_promo_codes()

    if not promo_codes:
        await message.reply("üìã –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    promo_text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n"
    for promo in promo_codes:
        promo_id, code, reward_amount, max_activations, current_activations, expires_at, created_by, created_at = promo
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if current_activations < max_activations else "‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω"
        expires = f" (–¥–æ {expires_at})" if expires_at else ""
        promo_text += f"üé´ <code>{code}</code>\nüí∞ {reward_amount}$ | {current_activations}/{max_activations} | {status}{expires}\n\n"

    await message.reply(promo_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /logs –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
async def logs_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    # Rate limiting
    if not await check_command_rate_limit(message.from_user.id, 'logs'):
        await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã")
        return

    args = message.text.split()
    limit = 20  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20 –∑–∞–ø–∏—Å–µ–π
    username = None

    if len(args) > 1:
        try:
            if args[1].startswith('@'):
                username = args[1][1:]  # –£–±—Ä–∞—Ç—å @
            else:
                limit = int(args[1])
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /logs [username|@username] [limit]")
            return

    if len(args) > 2:
        try:
            limit = int(args[2])
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π limit")
            return

    logs = await async_get_user_logs_by_username(username, limit)

    if not logs:
        await message.reply("üìã –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    logs_text = "üìã <b>–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for log in logs:
        telegram_id, action, amount, reason, created_at = log
        # –ü–æ–ª—É—á–∏—Ç—å username –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        user_data = await async_get_user(telegram_id)
        username_display = user_data[2] if user_data and user_data[2] else f"ID:{telegram_id}"
        amount_str = f" {amount}$" if amount != 0 else ""
        logs_text += f"üë§ @{username_display}\n‚ö° {action}{amount_str}\nüí¨ {reason}\nüïí {created_at}\n\n"

    await message.reply(logs_text, parse_mode="HTML")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def back_to_main(callback_query: types.CallbackQuery):
    welcome_text, parse_mode = await get_welcome_text(callback_query.from_user)
    try:
        await callback_query.message.edit_text(welcome_text, reply_markup=get_main_menu(), parse_mode=parse_mode)
    except:
        try:
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=welcome_text, parse_mode=parse_mode)
            await callback_query.message.edit_media(media=media, reply_markup=get_main_menu())
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=welcome_text, reply_markup=get_main_menu(), parse_mode=parse_mode)
    try:
        await callback_query.answer()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"
async def daily_bonus_handler(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
    if user.is_bot:
        await callback_query.answer("‚ùå –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã", show_alert=True)
        return

    # Rate limiting: –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    last_attempt = daily_bonus_attempts.get(user.id, 0)
    if current_time - last_attempt < DAILY_BONUS_COOLDOWN:
        remaining = int(DAILY_BONUS_COOLDOWN - (current_time - last_attempt))
        await callback_query.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π", show_alert=True)
        return

    daily_bonus_attempts[user.id] = current_time

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
    await async_log_action(user.id, "daily_bonus_attempt", 0, f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞")

    user_data = await async_get_user(user.id)
    task = get_daily_task()
    today = date.today()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = await async_get_user(user.id)
        last_completed = user_data[11] if user_data and len(user_data) > 11 else None

        if last_completed and last_completed == str(today):
            bonus_text = f"""üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å

‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!

üí∞ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: {task['reward']}$

–ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!"""
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            completed = check_daily_task_completion(user_data, task) if user_data else False

            if completed:
                # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                await async_update_balance(user.id, task['reward'])
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
                await async_db.log_action(user.id, "daily_task_completed", task['reward'], f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {task['description']}")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
                await async_log_action(user.id, "daily_bonus", task['reward'], f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {task['description']}")

                bonus_text = f"""üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å

‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!

üí∞ –ù–∞–≥—Ä–∞–¥–∞: {task['reward']}$

üèÜ {task['description']}
–ù–∞–≥—Ä–∞–¥–∞: {task['reward']}$"""
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = 0
                if task["type"] == "referrals":
                    progress = user_data[4] if user_data else 0  # referral_count
                elif task["type"] == "spent":
                    progress = user_data[7] if user_data else 0  # total_spent
                elif task["type"] == "deposited":
                    progress = user_data[6] if user_data else 0  # total_deposited
                elif task["type"] == "games":
                    progress = user_data[8] if user_data else 0  # games_played

                bonus_text = f"""üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å

üèÜ {task['description']}
–ù–∞–≥—Ä–∞–¥–∞: {task['reward']}$

üîú –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{task['target']}

üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É!"""

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ daily_bonus_handler: {e}")
        bonus_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=bonus_text)
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=bonus_text, reply_markup=get_back_button())

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
async def referral_handler(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    referral_count = user_data[4] if user_data else 0
    referral_balance = round(float(user_data[5]), 2) if user_data and user_data[5] is not None else 0

    referral_text = f"""üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    
    üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: {referral_count}
    üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {referral_balance}$
    
    üí° –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! –ü–æ–ª—É—á–∞–π 0.3$ –∑–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –Ω–∞ —Å—É–º–º—É –æ—Ç 2$!
    
    üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
    https://t.me/VanishCasinoBot?start={user.id}"""

    referral_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ", callback_data="withdraw_referral")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=referral_text)
        await callback_query.message.edit_media(media=media, reply_markup=referral_keyboard)
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=referral_text, reply_markup=referral_keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
async def profile_handler(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    stats = await get_cached_user_stats(user.id)

    if not stats:
        await callback_query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è
    task = get_daily_task()

    profile_text = f"""üé≠ <b>–õ–ò–ß–ù–´–ô –ü–†–û–§–ò–õ–¨</b> üé≠

üéÅ <b>–ï–ñ–ï–î–ù–ï–í–ù–û–ï –ó–ê–î–ê–ù–ò–ï</b>
<blockquote>{task['description']} - –ù–∞–≥—Ä–∞–¥–∞: {task['reward']}$</blockquote>

‚îå‚îÄ <b>üë§ –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>
‚îÇ üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{stats['username']}
‚îî‚îÄüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['created_at']}


‚îå‚îÄ <b>üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b> ‚îÄ‚îê
‚îÇ üíµ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <code>{stats['balance']}$</code>
‚îÇ üíé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <code>{stats['referral_balance']}$</code>
‚îÇ üí≥ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: <code>{stats['total_deposited']}$</code>
‚îÇ üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <code>{stats['total_spent']}$</code>
‚îî‚îÄüìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <code>{stats['net_profit']}$</code>

‚îå‚îÄ <b>üéÆ –ò–ì–†–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨</b> ‚îÄ‚îê
‚îÇ üé≤ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <code>{stats['games_played']}</code>
‚îÇ üéØ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç: <code>{stats['win_rate']:.1f}%</code>
‚îÇ üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: <code>{stats['avg_bet']:.2f}$</code>
‚îÇ üìà –ü—Ä–∏–±—ã–ª—å –Ω–∞ –∏–≥—Ä—É: <code>{stats['profit_per_game']:.2f}$</code>
‚îî‚îÄüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <i>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

‚îå‚îÄ <b>üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</b> ‚îÄ‚îê
‚îÇ üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: <code>{stats['referral_count']}</code>
‚îÇ üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{stats['referral_balance']}$</code>
‚îÇ üìù –ú–∏–Ω. –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <code>2$</code>
‚îî‚îÄüîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <i>–í –ø—Ä–æ—Ñ–∏–ª–µ</i>"""

    profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=profile_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=profile_keyboard)
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=profile_text, reply_markup=profile_keyboard, parse_mode="HTML")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
async def edit_profile_handler(callback_query: types.CallbackQuery):
    edit_text = """üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"""

    edit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_username")],
        [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="change_avatar")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])

    try:
        await callback_query.message.edit_text(edit_text, reply_markup=edit_keyboard, parse_mode="HTML")
    except:
        await callback_query.message.answer(edit_text, reply_markup=edit_keyboard, parse_mode="HTML")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def detailed_stats_handler(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    user_data = await async_get_user(user.id)

    if not user_data:
        await callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    games_played = user_data[8] if user_data[8] is not None else 0
    total_deposited = round(float(user_data[6]), 2) if user_data[6] is not None else 0
    total_spent = round(float(user_data[7]), 2) if user_data[7] is not None else 0

    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
    avg_bet = total_spent / max(1, games_played)
    profit_per_game = (total_deposited - total_spent) / max(1, games_played)

    stats_text = f"""üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b> üìä

‚îå‚îÄ <b>üéÆ –ò–ì–†–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b> ‚îÄ‚îê
‚îÇ üé≤ –í—Å–µ–≥–æ –∏–≥—Ä: <code>{games_played}</code>
‚îÇ üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: <code>{avg_bet:.2f}$</code>
‚îÇ üìà –ü—Ä–∏–±—ã–ª—å –Ω–∞ –∏–≥—Ä—É: <code>{profit_per_game:.2f}$</code>
‚îÇ üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: <i>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ <b>üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò</b> ‚îÄ‚îê
‚îÇ üí≥ –û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: <code>{total_deposited}$</code>
‚îÇ üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: <code>{total_spent}$</code>
‚îÇ üìä ROI: <code>{(total_spent / max(1, total_deposited) * 100):.1f}%</code>
‚îÇ üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <i>–í—ã—Å–æ–∫–∞—è</i>
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üí° <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"""

    stats_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="progress_charts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])

    try:
        await callback_query.message.edit_text(stats_text, reply_markup=stats_keyboard, parse_mode="HTML")
    except:
        await callback_query.message.answer(stats_text, reply_markup=stats_keyboard, parse_mode="HTML")
    await callback_query.answer()

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—Ñ–∏–ª—è
async def transaction_history_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def profile_settings_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def change_username_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def change_avatar_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def progress_charts_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –†–µ–π—Ç–∏–Ω–≥"
async def rating_handler(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø—ã –∏–∑ –∫—ç—à–∞
    top_deposited, top_spent, top_referrals = await get_cached_tops()

    rating_text = "üìä –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤:\n\n"

    rating_text += "üí∞ –¢–æ–ø –ø–æ–ø–æ–ª–Ω–∏–≤—à–∏—Ö:\n"
    for i, (username, amount) in enumerate(top_deposited, 1):
        username = username or f"User{i}"
        rating_text += f"{i}. {username} - {amount}$\n"

    rating_text += "\nüí∏ –¢–æ–ø –ø–æ—Ç—Ä–∞—Ç–∏–≤—à–∏—Ö:\n"
    for i, (username, amount) in enumerate(top_spent, 1):
        username = username or f"User{i}"
        rating_text += f"{i}. {username} - {amount}$\n"

    rating_text += "\nüë• –¢–æ–ø –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö:\n"
    for i, (username, count) in enumerate(top_referrals, 1):
        username = username or f"User{i}"
        rating_text += f"{i}. {username} - {count} —á–µ–ª.\n"

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=rating_text)
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=rating_text, reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìà –®–∞–Ω—Å—ã"
async def chances_handler(callback_query: types.CallbackQuery):
    chances_text = f"""üìà –®–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –∏–≥—Ä–∞—Ö:

üé≤ –ö–æ—Å—Ç–∏: {DUEL_WIN_CHANCE}% (x{DUEL_MULTIPLIER})
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª: {BASKETBALL_WIN_CHANCE}% (x{BASKETBALL_MULTIPLIER})
üéØ –î–∞—Ä—Ç—Å: 30% (x2.0) [faq]({DARTS_FAQ_URL})
üé∞ –°–ª–æ—Ç—ã: {SLOTS_WIN_CHANCE}% (x{SLOTS_MULTIPLIER})
üé≥ –ö—É–±–∏–∫–∏–∏: {DICE_WIN_CHANCE}% (x{DICE_MULTIPLIER})
üÉè BlackJack: {BLACKJACK_WIN_CHANCE}% (x{BLACKJACK_MULTIPLIER})

üí° –®–∞–Ω—Å—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - –∏–≥—Ä–∞ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞.
üé∞ –°–ª–æ—Ç—ã - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ —Å —Ç—Ä–µ–º—è –±–∞—Ä–∞–±–∞–Ω–∞–º–∏.
üÉè BlackJack - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ —Å –¥–∏–ª–µ—Ä–æ–º."""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=chances_text)
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=chances_text, reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —à–∞–Ω—Å–æ–≤
async def admin_chances_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    chances_text = f"""üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–Ω—Å–∞–º–∏ –≤—ã–∏–≥—Ä—ã—à–∞:

üé≤ –ö–æ—Å—Ç–∏: {DUEL_WIN_CHANCE}%
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª: {BASKETBALL_WIN_CHANCE}%
üé∞ –°–ª–æ—Ç—ã: {SLOTS_WIN_CHANCE}%
üé≥ –ö—É–±–∏–∫–∏: {DICE_WIN_CHANCE}%
üÉè BlackJack: {BLACKJACK_WIN_CHANCE}%

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤:"""

    chances_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="edit_chance_duel")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="edit_chance_basketball")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="edit_chance_slots")],
        [InlineKeyboardButton(text="üé≥ –ö—É–±–∏–∫–∏", callback_data="edit_chance_dice")],
        [InlineKeyboardButton(text="üÉè BlackJack", callback_data="edit_chance_blackjack")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=chances_text)
        await callback_query.message.edit_media(media=media, reply_markup=chances_keyboard)
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=chances_text, reply_markup=chances_keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–Ω—Å–∞ –¥—É—ç–ª–∏
async def edit_chance_duel_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_duel_chance)
    try:
        await callback_query.message.edit_text(f"üé≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –î—É—ç–ª–∏ (—Ç–µ–∫—É—â–∏–π: {DUEL_WIN_CHANCE}%):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üé≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –î—É—ç–ª–∏ (—Ç–µ–∫—É—â–∏–π: {DUEL_WIN_CHANCE}%):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–Ω—Å–∞ –ö—É–±–∏–∫–∏–∞
async def edit_chance_dice_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_dice_chance)
    try:
        await callback_query.message.edit_text(f"üé≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ö—É–±–∏–∫–∏–∞ (—Ç–µ–∫—É—â–∏–π: {DICE_WIN_CHANCE}%):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üé≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ö—É–±–∏–∫–∏–∞ (—Ç–µ–∫—É—â–∏–π: {DICE_WIN_CHANCE}%):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–Ω—Å–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
async def edit_chance_basketball_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_basketball_chance)
    try:
        await callback_query.message.edit_text(f"üèÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ë–∞—Å–∫–µ—Ç–±–æ–ª–∞ (—Ç–µ–∫—É—â–∏–π: {BASKETBALL_WIN_CHANCE}%):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üèÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ë–∞—Å–∫–µ—Ç–±–æ–ª–∞ (—Ç–µ–∫—É—â–∏–π: {BASKETBALL_WIN_CHANCE}%):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–Ω—Å–∞ —Å–ª–æ—Ç–æ–≤
async def edit_chance_slots_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_slots_chance)
    try:
        await callback_query.message.edit_text(f"üé∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –°–ª–æ—Ç–æ–≤ (—Ç–µ–∫—É—â–∏–π: {SLOTS_WIN_CHANCE}%):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üé∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –°–ª–æ—Ç–æ–≤ (—Ç–µ–∫—É—â–∏–π: {SLOTS_WIN_CHANCE}%):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–Ω—Å–∞ blackjack
async def edit_chance_blackjack_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_blackjack_chance)
    try:
        await callback_query.message.edit_text(f"üÉè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è BlackJack (—Ç–µ–∫—É—â–∏–π: {BLACKJACK_WIN_CHANCE}%):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üÉè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è BlackJack (—Ç–µ–∫—É—â–∏–π: {BLACKJACK_WIN_CHANCE}%):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —à–∞–Ω—Å–∞ –¥—É—ç–ª–∏
async def set_duel_chance_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_chance = float(message.text.strip())
        if not 0 <= new_chance <= 100:
            await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", reply_markup=get_back_button())
            return

        global DUEL_WIN_CHANCE
        DUEL_WIN_CHANCE = new_chance
        await async_save_game_setting('duel_win_chance', new_chance)
        try:
            await message.answer(f"‚úÖ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –î—É—ç–ª–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_chance}%", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —à–∞–Ω—Å–∞ –ö—É–±–∏–∫–∏–∞
async def set_dice_chance_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_chance = float(message.text.strip())
        if not 0 <= new_chance <= 100:
            await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", reply_markup=get_back_button())
            return

        global DICE_WIN_CHANCE
        DICE_WIN_CHANCE = new_chance
        await async_save_game_setting('dice_win_chance', new_chance)
        try:
            await message.answer(f"‚úÖ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –ö—É–±–∏–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_chance}%", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —à–∞–Ω—Å–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
async def set_basketball_chance_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_chance = float(message.text.strip())
        if not 0 <= new_chance <= 100:
            await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", reply_markup=get_back_button())
            return

        global BASKETBALL_WIN_CHANCE
        BASKETBALL_WIN_CHANCE = new_chance
        await async_save_game_setting('basketball_win_chance', new_chance)
        try:
            await message.answer(f"‚úÖ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –ë–∞—Å–∫–µ—Ç–±–æ–ª–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_chance}%", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —à–∞–Ω—Å–∞ —Å–ª–æ—Ç–æ–≤
async def set_slots_chance_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_chance = float(message.text.strip())
        if not 0 <= new_chance <= 100:
            await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", reply_markup=get_back_button())
            return

        global SLOTS_WIN_CHANCE
        SLOTS_WIN_CHANCE = new_chance
        await async_save_game_setting('slots_win_chance', new_chance)
        try:
            await message.answer(f"‚úÖ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –°–ª–æ—Ç–∞—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_chance}%", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —à–∞–Ω—Å–∞ blackjack
async def set_blackjack_chance_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_chance = float(message.text.strip())
        if not 0 <= new_chance <= 100:
            await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", reply_markup=get_back_button())
            return

        global BLACKJACK_WIN_CHANCE
        BLACKJACK_WIN_CHANCE = new_chance
        await async_save_game_setting('blackjack_win_chance', new_chance)
        try:
            await message.answer(f"‚úÖ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ BlackJack –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_chance}%", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
async def admin_multiplier_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    multiplier_text = f"""‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ –≤—ã–∏–≥—Ä—ã—à–∞:

üé≤ –ö–æ—Å—Ç–∏: x{DUEL_MULTIPLIER}
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª: x{BASKETBALL_MULTIPLIER}
üé∞ –°–ª–æ—Ç—ã: x{SLOTS_MULTIPLIER}
üé≥ –ö—É–±–∏–∫–∏: x{DICE_MULTIPLIER}
üÉè BlackJack: x{BLACKJACK_MULTIPLIER}

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è:"""

    multiplier_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="edit_multiplier_duel")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="edit_multiplier_basketball")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="edit_multiplier_slots")],
        [InlineKeyboardButton(text="üé≥ –ö—É–±–∏–∫–∏", callback_data="edit_multiplier_dice")],
        [InlineKeyboardButton(text="üÉè BlackJack", callback_data="edit_multiplier_blackjack")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=multiplier_text)
        await callback_query.message.edit_media(media=media, reply_markup=multiplier_keyboard)
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=multiplier_text, reply_markup=multiplier_keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def admin_panel_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    await callback_query.message.edit_media(media=media, reply_markup=get_admin_panel())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def admin_stats_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    users = await async_get_user_stats(limit=50)

    if not users:
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    else:
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        for i, (username, balance, referral_count) in enumerate(users, 1):
            username = username or f"User{i}"
            balance = round(float(balance), 2) if balance is not None else 0
            referral_count = referral_count or 0
            stats_text += f"{i}. @{username} - –ë–∞–ª–∞–Ω—Å: {balance}$ - –†–µ—Ñ–µ—Ä–∞–ª—ã: {referral_count}\n"

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=stats_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=stats_text, reply_markup=get_back_button(), parse_mode="HTML")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"
async def admin_set_balance_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    set_text = """üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/set @username —Å—É–º–º–∞

–ü—Ä–∏–º–µ—Ä: /set @testuser 500

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç–µ."""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=set_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=set_text, reply_markup=get_back_button(), parse_mode="HTML")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥—É—ç–ª–∏
async def edit_multiplier_duel_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_duel_multiplier)
    try:
        await callback_query.message.edit_text(f"üé≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –î—É—ç–ª–∏ (—Ç–µ–∫—É—â–∏–π: x{DUEL_MULTIPLIER}):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üé≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –î—É—ç–ª–∏ (—Ç–µ–∫—É—â–∏–π: x{DUEL_MULTIPLIER}):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –ö—É–±–∏–∫–∏–∞
async def edit_multiplier_dice_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_dice_multiplier)
    try:
        await callback_query.message.edit_text(f"üé≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ö—É–±–∏–∫–∏–∞ (—Ç–µ–∫—É—â–∏–π: x{DICE_MULTIPLIER}):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üé≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ö—É–±–∏–∫–∏–∞ (—Ç–µ–∫—É—â–∏–π: x{DICE_MULTIPLIER}):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
async def edit_multiplier_basketball_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_basketball_multiplier)
    try:
        await callback_query.message.edit_text(f"üèÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ë–∞—Å–∫–µ—Ç–±–æ–ª–∞ (—Ç–µ–∫—É—â–∏–π: x{BASKETBALL_MULTIPLIER}):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üèÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ë–∞—Å–∫–µ—Ç–±–æ–ª–∞ (—Ç–µ–∫—É—â–∏–π: x{BASKETBALL_MULTIPLIER}):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è —Å–ª–æ—Ç–æ–≤
async def edit_multiplier_slots_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_slots_multiplier)
    try:
        await callback_query.message.edit_text(f"üé∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –°–ª–æ—Ç–æ–≤ (—Ç–µ–∫—É—â–∏–π: x{SLOTS_MULTIPLIER}):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üé∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –°–ª–æ—Ç–æ–≤ (—Ç–µ–∫—É—â–∏–π: x{SLOTS_MULTIPLIER}):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è blackjack
async def edit_multiplier_blackjack_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_blackjack_multiplier)
    try:
        await callback_query.message.edit_text(f"üÉè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è BlackJack (—Ç–µ–∫—É—â–∏–π: x{BLACKJACK_MULTIPLIER}):", reply_markup=get_back_button())
    except:
        await callback_query.message.answer(f"üÉè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è BlackJack (—Ç–µ–∫—É—â–∏–π: x{BLACKJACK_MULTIPLIER}):", reply_markup=get_back_button())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥—É—ç–ª–∏
async def set_duel_multiplier_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_multiplier = float(message.text.strip())
        if new_multiplier <= 0:
            await message.answer("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", reply_markup=get_back_button())
            return

        global DUEL_MULTIPLIER
        DUEL_MULTIPLIER = new_multiplier
        await async_save_game_setting('duel_multiplier', new_multiplier)
        try:
            await message.answer(f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –î—É—ç–ª–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ x{new_multiplier}", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –ö—É–±–∏–∫–∏–∞
async def set_dice_multiplier_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_multiplier = float(message.text.strip())
        if new_multiplier <= 0:
            await message.answer("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", reply_markup=get_back_button())
            return

        global DICE_MULTIPLIER
        DICE_MULTIPLIER = new_multiplier
        await async_save_game_setting('dice_multiplier', new_multiplier)
        try:
            await message.answer(f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –ö—É–±–∏–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ x{new_multiplier}", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
async def set_basketball_multiplier_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_multiplier = float(message.text.strip())
        if new_multiplier <= 0:
            await message.answer("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", reply_markup=get_back_button())
            return

        global BASKETBALL_MULTIPLIER
        BASKETBALL_MULTIPLIER = new_multiplier
        await async_save_game_setting('basketball_multiplier', new_multiplier)
        try:
            await message.answer(f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –ë–∞—Å–∫–µ—Ç–±–æ–ª–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ x{new_multiplier}", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Å–ª–æ—Ç–æ–≤
async def set_slots_multiplier_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_multiplier = float(message.text.strip())
        if new_multiplier <= 0:
            await message.answer("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", reply_markup=get_back_button())
            return

        global SLOTS_MULTIPLIER
        SLOTS_MULTIPLIER = new_multiplier
        await async_save_game_setting('slots_multiplier', new_multiplier)
        try:
            await message.answer(f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –°–ª–æ—Ç–∞—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ x{new_multiplier}", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è blackjack
async def set_blackjack_multiplier_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_multiplier = float(message.text.strip())
        if new_multiplier <= 0:
            await message.answer("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", reply_markup=get_back_button())
            return

        global BLACKJACK_MULTIPLIER
        BLACKJACK_MULTIPLIER = new_multiplier
        await async_save_game_setting('blackjack_multiplier', new_multiplier)
        try:
            await message.answer(f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ BlackJack –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ x{new_multiplier}", reply_markup=get_admin_panel())
        except:
            pass
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÆ –ò–≥—Ä–∞—Ç—å"
async def play_handler(callback_query: types.CallbackQuery):
    games_text = "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=games_text)
        await callback_query.message.edit_media(media=media, reply_markup=get_games_menu())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=games_text, reply_markup=get_games_menu())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Å—Ç–∏"
async def duel_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(DuelStates.waiting_for_bet)

    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

    duel_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üé≤ –ö–æ—Å—Ç–∏ [faq]({DUEL_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{DUEL_MULTIPLIER}

üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ $:"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=duel_text, parse_mode="Markdown")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
        message_id = callback_query.message.message_id
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=duel_text, reply_markup=get_back_button(), parse_mode="Markdown")
        message_id = new_msg.message_id

    await state.update_data(message_id=message_id, chat_id=callback_query.message.chat.id)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–±–∏–∫–∏"
async def dice_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(DiceStates.waiting_for_bet)

    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

    dice_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üé≥ –ö—É–±–∏–∫–∏ [faq]({DICE_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{DICE_MULTIPLIER}

üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ $:"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=dice_text, parse_mode="Markdown")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
        message_id = callback_query.message.message_id
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=dice_text, reply_markup=get_back_button(), parse_mode="Markdown")
        message_id = new_msg.message_id

    await state.update_data(message_id=message_id, chat_id=callback_query.message.chat.id)
    await callback_query.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ –¥—É—ç–ª–∏
async def duel_bet_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    try:
        bet = float(message.text.strip())
        if bet < 1.0:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')
            chat_id = data.get('chat_id')

            error_text = """‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏</b>

–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1.0$"""

            if message_id and chat_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        user_data = await async_get_user(message.from_user.id)
        balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

        if bet > balance:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=get_back_button())
            return

        data = await state.get_data()
        message_id = data.get('message_id')

        confirm_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üé≤ –ö–æ—Å—Ç–∏ [faq]({DUEL_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{DUEL_MULTIPLIER}

üí∞ –°—Ç–∞–≤–∫–∞: {bet}$"""

        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", callback_data=f"duel_confirm_{bet}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_duel")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏
        if message_id:
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=confirm_text, parse_mode="Markdown")
            await bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=media,
                reply_markup=confirm_keyboard
            )
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=confirm_text, reply_markup=confirm_keyboard, parse_mode="Markdown")

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞—Å–∫–µ—Ç–±–æ–ª"
async def basketball_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BasketballStates.waiting_for_bet)

    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

    basketball_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª [faq]({BASKETBALL_FAQ_URL})

üéØ –£–≥–∞–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –º—è—á–∞ –≤ –∫–æ–ª—å—Ü–æ
‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{BASKETBALL_MULTIPLIER}

üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ $:"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=basketball_text, parse_mode="Markdown")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
        message_id = callback_query.message.message_id
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=basketball_text, reply_markup=get_back_button(), parse_mode="Markdown")
        message_id = new_msg.message_id

    await state.update_data(message_id=message_id, chat_id=callback_query.message.chat.id)
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    if results_group_id:
        try:
            group_text = f"üÉè BlackJack\nüë§ {user.first_name or user.username}\nüí∞ –°—Ç–∞–≤–∫–∞: {bet}$\n–ü–µ—Ä–µ–±–æ—Ä! -{bet}$"
            await bot.send_message(chat_id=results_group_id, text=group_text)
        except:
            pass

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª
async def basketball_bet_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    try:
        bet = float(message.text.strip())
        if bet < 1.0:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')
            chat_id = data.get('chat_id')

            error_text = """‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏</b>

–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1.0$"""

            if message_id and chat_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        user_data = await async_get_user(message.from_user.id)
        balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

        if bet > balance:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=get_back_button())
            return

        data = await state.get_data()
        message_id = data.get('message_id')

        confirm_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª [faq]({BASKETBALL_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{BASKETBALL_MULTIPLIER}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:"""

        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÄ –ë—Ä–æ—Å–æ–∫", callback_data=f"basketball_predict_hit_{bet}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_basketball")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏
        if message_id:
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=confirm_text, parse_mode="Markdown")
            await bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=media,
                reply_markup=confirm_keyboard
            )
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=confirm_text, reply_markup=confirm_keyboard, parse_mode="Markdown")

        await state.clear()

    except ValueError:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        message_id = data.get('message_id')
        chat_id = data.get('chat_id')

        error_text = """‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5)"""

        if message_id and chat_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_back_button()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è "–ü–æ–ø–∞–¥–µ—Ç"
async def basketball_predict_hit_handler(callback_query: types.CallbackQuery):
    await process_basketball_prediction(callback_query, "hit")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª
async def process_basketball_prediction(callback_query: types.CallbackQuery, prediction: str):
    data = callback_query.data.split("_")
    bet = float(data[3])  # bet –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 3 (basketball_predict_hit_123.45)

    user = callback_query.from_user

    print(f"–ù–∞—á–∞–ª–æ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞: user={user.id}, bet={bet}, prediction={prediction}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞ (50/50 —Å rigged –ª–æ–≥–∏–∫–æ–π)
    # Rigged –ª–æ–≥–∏–∫–∞: —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –∏–≥—Ä–æ–∫–∞ BASKETBALL_WIN_CHANCE%
    actual_result = "hit" if random.random() < (BASKETBALL_WIN_CHANCE / 100) else "miss"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª –∏–≥—Ä–æ–∫
    prediction_correct = (prediction == actual_result)

    # –ò–º–∏—Ç–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏
    if actual_result == "hit":
        result_emoji = "üéâ"
        result_text = "–ì–û–õ! –ú—è—á –≤ –∫–æ–ª—å—Ü–µ! üèÄ"
    else:
        result_emoji = "üòû"
        result_text = "–ú–∏–º–æ! –ú—è—á –Ω–µ –ø–æ–ø–∞–ª –≤ –∫–æ–ª—å—Ü–æ üèÄ"

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä
    await async_update_games_played(user.id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
    if prediction_correct:
        # –í—ã–∏–≥—Ä—ã—à - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ
        winnings = bet * BASKETBALL_MULTIPLIER
        await async_update_balance(user.id, winnings)
        game_result = f"‚úÖ –í—ã —É–≥–∞–¥–∞–ª–∏! +{winnings}$"
        status_emoji = "üéâ"
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ
        await async_update_balance(user.id, -bet)
        game_result = f"‚ùå –ù–µ —É–≥–∞–¥–∞–ª–∏! -{bet}$"
        status_emoji = "üòû"

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    prediction_text = "üéØ –ü–æ–ø–∞–¥–µ—Ç"

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Å–∫–µ—Ç–±–æ–ª–∞: actual_result={actual_result}, prediction_correct={prediction_correct}, game_result={game_result}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: results_group_id = {results_group_id}")
    if results_group_id:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞ –≤ –≥—Ä—É–ø–ø—É {results_group_id}")
        try:
            username = f"@{user.username}" if user.username else user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if "+" in game_result:
                winnings = game_result.split()[-1]
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            elif "-" in game_result:
                winnings = f"-{bet}$"
                winnings_label = "–ü—Ä–æ–∏–≥—Ä—ã—à"
            else:
                winnings = "0$"
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            group_text = f"""üìé –ò–≥—Ä–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text} {game_result}
üí≤ {winnings_label}: {winnings}"""
            photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL
            await bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            pass
    else:
        print("–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    # –¢–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—Ä–æ—Å–∫–∞
    game_text = f"""{result_text}

–í—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∏: {prediction_text}

{game_result}"""

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤
    result_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÄ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="game_basketball")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –∏–≥—Ä", callback_data="play")]
    ])

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
    photo_url = WIN_IMAGE_URL if prediction_correct else LOSE_IMAGE_URL
    try:
        media = InputMediaPhoto(media=photo_url, caption=game_text)
        await bot.edit_message_media(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            media=media,
            reply_markup=result_keyboard
        )
    except:
        await callback_query.message.answer_photo(photo=photo_url, caption=game_text, reply_markup=result_keyboard)


    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–æ—Ç—ã"
async def slots_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(SlotsStates.waiting_for_bet)

    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

    slots_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üé∞ –°–ª–æ—Ç—ã [faq]({SLOTS_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{SLOTS_MULTIPLIER}

üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ $:"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=slots_text, parse_mode="Markdown")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
        message_id = callback_query.message.message_id
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=slots_text, reply_markup=get_back_button(), parse_mode="Markdown")
        message_id = new_msg.message_id

    await state.update_data(message_id=message_id, chat_id=callback_query.message.chat.id)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "BlackJack"
async def blackjack_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BlackjackStates.waiting_for_bet)

    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

    blackjack_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üÉè BlackJack [faq]({BLACKJACK_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{BLACKJACK_MULTIPLIER}

üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ $:"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=blackjack_text, parse_mode="Markdown")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
        message_id = callback_query.message.message_id
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=blackjack_text, reply_markup=get_back_button(), parse_mode="Markdown")
        message_id = new_msg.message_id

    await state.update_data(message_id=message_id, chat_id=callback_query.message.chat.id)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–æ—Ç—ã
async def slots_bet_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    try:
        bet = float(message.text.strip())
        if bet < 1.0:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')
            chat_id = data.get('chat_id')

            error_text = """‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏</b>

–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1.0$"""

            if message_id and chat_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        user_data = await async_get_user(message.from_user.id)
        balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

        if bet > balance:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')
            chat_id = data.get('chat_id')

            error_text = f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>

–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}$</code>
–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <code>{bet}$</code>"""

            if message_id and chat_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        data = await state.get_data()
        message_id = data.get('message_id')

        confirm_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üé∞ –°–ª–æ—Ç—ã [faq]({SLOTS_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{SLOTS_MULTIPLIER}

üí∞ –°—Ç–∞–≤–∫–∞: {bet}$"""

        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data=f"slots_spin_{bet}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_slots")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏
        if message_id:
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=confirm_text, parse_mode="Markdown")
            await bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=media,
                reply_markup=confirm_keyboard
            )
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=confirm_text, reply_markup=confirm_keyboard, parse_mode="Markdown")

        await state.clear()

    except ValueError:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        message_id = data.get('message_id')
        chat_id = data.get('chat_id')

        error_text = """‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5)"""

        if message_id and chat_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_back_button()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ blackjack
async def blackjack_bet_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    try:
        bet = float(message.text.strip())
        if bet < 1.0:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')
            chat_id = data.get('chat_id')

            error_text = """‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏</b>

–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1.0$"""

            if message_id and chat_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        user_data = await async_get_user(message.from_user.id)
        balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

        if bet > balance:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')
            chat_id = data.get('chat_id')

            error_text = f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>

–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}$</code>
–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <code>{bet}$</code>"""

            if message_id and chat_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        data = await state.get_data()
        message_id = data.get('message_id')

        # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã blackjack
        # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–ª–æ–¥–∞
        random.shuffle(deck)

        player_cards = [deck.pop(), deck.pop()]
        dealer_cards = [deck.pop(), deck.pop()]

        player_score = sum(player_cards)
        dealer_score = sum(dealer_cards)

        game_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üÉè BlackJack [faq]({BLACKJACK_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{BLACKJACK_MULTIPLIER}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$

–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_cards} (–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_score})
–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer_cards[0]} (–ö–∞—Ä—Ç—ã –¥–∏–ª–ª–µ—Ä–∞: ?)"""

        game_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üÉè –ï—â–µ –∫–∞—Ä—Ç—É", callback_data=f"blackjack_hit_{bet}_{player_cards[0]}_{player_cards[1]}_{dealer_cards[0]}_{dealer_cards[1]}"),
                InlineKeyboardButton(text="‚èπÔ∏è –°—Ç–æ–ø", callback_data=f"blackjack_stand_{bet}_{player_cards[0]}_{player_cards[1]}_{dealer_cards[0]}_{dealer_cards[1]}")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_blackjack")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
        if message_id:
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=game_text, parse_mode="Markdown")
            await bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=media,
                reply_markup=game_keyboard
            )
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=game_text, reply_markup=game_keyboard, parse_mode="Markdown")

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ï—â–µ –∫–∞—Ä—Ç—É" –≤ blackjack
async def blackjack_hit_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    bet = float(data[2])
    player_cards = [int(x) for x in data[3:-2]]
    dealer_cards = [int(data[-2]), int(data[-1])]

    user = callback_query.from_user

    print(f"–ù–∞—á–∞–ª–æ blackjack hit: user={user.id}, bet={bet}, player_cards={player_cards}, dealer_cards={dealer_cards}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
    deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
    random.shuffle(deck)
    # –£–±–∏—Ä–∞–µ–º —É–∂–µ —Ä–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    for card in player_cards + dealer_cards:
        if card in deck:
            deck.remove(card)

    new_card = deck.pop()
    player_cards.append(new_card)
    player_score = sum(player_cards)

    if player_score > 21:
        # –ü–µ—Ä–µ–±–æ—Ä
        await async_update_games_played(user.id)
        await async_update_balance(user.id, -bet)
        result_text = f"–ü–µ—Ä–µ–±–æ—Ä! -{bet}$"
        result_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÉè –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="game_blackjack")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –∏–≥—Ä", callback_data="play")]
        ])

        photo_url = LOSE_IMAGE_URL
        game_caption = f"""–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_cards} (–û—á–∫–∏: {player_score})
–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_cards} (–û—á–∫–∏: {sum(dealer_cards)})

{result_text}"""
        media = InputMediaPhoto(media=photo_url, caption=game_caption, parse_mode="Markdown")
        await bot.edit_message_media(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            media=media,
            reply_markup=result_keyboard
        )

        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç blackjack hit (–ø–µ—Ä–µ–±–æ—Ä): player_score={player_score}, result_text={result_text}")

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: results_group_id = {results_group_id}")
        if results_group_id:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ blackjack –≤ –≥—Ä—É–ø–ø—É {results_group_id}")
            try:
                username = f"@{user.username}" if user.username else user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if "+" in result_text:
                    winnings = result_text.split()[-1]
                    winnings_label = "–í—ã–∏–≥—Ä—ã—à"
                elif "-" in result_text:
                    winnings = f"-{bet}$"
                    winnings_label = "–ü—Ä–æ–∏–≥—Ä—ã—à"
                else:
                    winnings = "0$"
                    winnings_label = "–í—ã–∏–≥—Ä—ã—à"
                group_text = f"""üìé –ò–≥—Ä–∞: BlackJack
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}
üí≤ {winnings_label}: {winnings}"""
                photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL
                await bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
                pass
        else:
            print("–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        game_text = f"""–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_cards} (–û—á–∫–∏: {player_score})
–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer_cards[0]} (–û—á–∫–∏: ?)"""

        game_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üÉè –ï—â–µ –∫–∞—Ä—Ç—É", callback_data=f"blackjack_hit_{bet}_{'_'.join(map(str, player_cards))}_{dealer_cards[0]}_{dealer_cards[1]}"),
                InlineKeyboardButton(text="‚èπÔ∏è –°—Ç–æ–ø", callback_data=f"blackjack_stand_{bet}_{'_'.join(map(str, player_cards))}_{dealer_cards[0]}_{dealer_cards[1]}")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_blackjack")]
        ])
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=game_text, parse_mode="Markdown")
        await bot.edit_message_media(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            media=media,
            reply_markup=game_keyboard
        )

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°—Ç–æ–ø" –≤ blackjack
async def blackjack_stand_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    bet = float(data[2])
    player_cards = [int(x) for x in data[3:-2]]
    dealer_cards = [int(data[-2]), int(data[-1])]

    user = callback_query.from_user

    print(f"–ù–∞—á–∞–ª–æ blackjack stand: user={user.id}, bet={bet}, player_cards={player_cards}, dealer_cards={dealer_cards}")

    # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17
    deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
    random.shuffle(deck)
    # –£–±–∏—Ä–∞–µ–º —É–∂–µ —Ä–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    for card in player_cards + dealer_cards:
        if card in deck:
            deck.remove(card)

    dealer_score = sum(dealer_cards)
    while dealer_score < 17:
        new_card = deck.pop()
        dealer_cards.append(new_card)
        dealer_score = sum(dealer_cards)

    player_score = sum(player_cards)

    await async_update_games_played(user.id)

    if dealer_score > 21 or player_score > dealer_score:
        # –í—ã–∏–≥—Ä—ã—à –∏–≥—Ä–æ–∫–∞
        winnings = bet * BLACKJACK_MULTIPLIER
        await async_update_balance(user.id, winnings)
        result_text = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{winnings}$"
    elif player_score == dealer_score:
        # –ù–∏—á—å—è
        result_text = f"ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        await async_update_balance(user.id, -bet)
        result_text = f"üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet}$"

    result_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÉè –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="game_blackjack")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –∏–≥—Ä", callback_data="play")]
    ])

    photo_url = WIN_IMAGE_URL if dealer_score > 21 or player_score > dealer_score else LOSE_IMAGE_URL if player_score < dealer_score else WIN_IMAGE_URL  # –ù–∏—á—å—è –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à
    game_caption = f"""–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_cards} (–û—á–∫–∏: {player_score})
–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_cards} (–û—á–∫–∏: {dealer_score})

{result_text}"""
    media = InputMediaPhoto(media=photo_url, caption=game_caption, parse_mode="Markdown")
    await bot.edit_message_media(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        media=media,
        reply_markup=result_keyboard
    )

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç blackjack stand: player_score={player_score}, dealer_score={dealer_score}, result_text={result_text}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: results_group_id = {results_group_id}")
    if results_group_id:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ blackjack –≤ –≥—Ä—É–ø–ø—É {results_group_id}")
        try:
            username = f"@{user.username}" if user.username else user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if "+" in result_text:
                winnings = result_text.split()[-1]
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            elif "-" in result_text:
                winnings = f"-{bet}$"
                winnings_label = "–ü—Ä–æ–∏–≥—Ä—ã—à"
            else:
                winnings = "0$"
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            group_text = f"""üìé –ò–≥—Ä–∞: BlackJack
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}
üí≤ {winnings_label}: {winnings}"""
            photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL
            await bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
        except Exception as e:
            pass
    else:
        print("–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä—É—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤
async def slots_spin_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    bet = float(data[2])

    user = callback_query.from_user

    print(f"–ù–∞—á–∞–ª–æ —Å–ª–æ—Ç–æ–≤: user={user.id}, bet={bet}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–æ—Ç–æ–≤
    # Rigged –ª–æ–≥–∏–∫–∞: —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ SLOTS_WIN_CHANCE%
    win_chance = random.random() < (SLOTS_WIN_CHANCE / 100)

    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
    symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé", "7Ô∏è‚É£"]

    if win_chance:
        # –í—ã–∏–≥—Ä—ã—à - –≤—Å–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        winning_symbol = random.choice(symbols)
        result = [winning_symbol, winning_symbol, winning_symbol]
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à - —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        result = []
        for _ in range(3):
            symbol = random.choice(symbols)
            # –ò–∑–±–µ–≥–∞–µ–º —Ç—Ä–µ—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            while len(result) == 2 and result[0] == result[1] == symbol:
                symbol = random.choice(symbols)
            result.append(symbol)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä
    await async_update_games_played(user.id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if win_chance:
        # –í—ã–∏–≥—Ä—ã—à
        winnings = bet * SLOTS_MULTIPLIER
        await async_update_balance(user.id, winnings)
        result_text = f"üéâ –î–ñ–ï–ö–ü–û–¢! +{winnings}$"
        status_emoji = "üé∞"
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        await async_update_balance(user.id, -bet)
        result_text = f"üòû –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ! -{bet}$"
        status_emoji = "üí∏"

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ—Ç–æ–≤: win_chance={win_chance}, result={result}, result_text={result_text}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: results_group_id = {results_group_id}")
    if results_group_id:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–æ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É {results_group_id}")
        try:
            username = f"@{user.username}" if user.username else user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if "+" in result_text:
                winnings = result_text.split()[-1]
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            elif "-" in result_text:
                winnings = f"-{bet}$"
                winnings_label = "–ü—Ä–æ–∏–≥—Ä—ã—à"
            else:
                winnings = "0$"
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            group_text = f"""üìé –ò–≥—Ä–∞: –°–ª–æ—Ç—ã
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}
üí≤ {winnings_label}: {winnings}"""
            photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL
            await bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            pass
    else:
        print("–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    final_result = f"üé∞ | {result[0]} | {result[1]} | {result[2]} |\n\n{result_text}"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤
    result_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å –µ—â–µ", callback_data="game_slots")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –∏–≥—Ä", callback_data="play")]
    ])

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    photo_url = WIN_IMAGE_URL if win_chance else LOSE_IMAGE_URL
    final_caption = f"üé∞ <b>–†–ï–ó–£–õ–¨–¢–ê–¢:</b>\n\n{final_result}"
    try:
        media = InputMediaPhoto(media=photo_url, caption=final_caption, parse_mode="HTML")
        await bot.edit_message_media(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            media=media,
            reply_markup=result_keyboard
        )
    except:
        await callback_query.message.answer_photo(photo=photo_url, caption=final_caption, reply_markup=result_keyboard, parse_mode="HTML")

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ –ö—É–±–∏–∫–∏–µ
async def dice_bet_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    try:
        bet = float(message.text.strip())
        if bet < 1.0:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')
            chat_id = data.get('chat_id')

            error_text = """‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏</b>

–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1.0$"""

            if message_id and chat_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        user_data = await async_get_user(message.from_user.id)
        balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

        if bet > balance:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=get_back_button())
            return

        data = await state.get_data()
        message_id = data.get('message_id')

        select_text = f"""üíé –ë–∞–ª–∞–Ω—Å: {balance}$

üé≥ –ö—É–±–∏–∫–∏ [faq]({DICE_FAQ_URL})

‚ôªÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{DICE_MULTIPLIER}

üí∞ –°—Ç–∞–≤–∫–∞: {bet}$

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ö—É–±–∏–∫–∏–∞:"""

        color_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω—ã–π", callback_data=f"dice_color_red_{bet}"),
                InlineKeyboardButton(text="üü¢ –ó–µ–ª–µ–Ω—ã–π", callback_data=f"dice_color_green_{bet}"),
                InlineKeyboardButton(text="üîµ –°–∏–Ω–∏–π", callback_data=f"dice_color_blue_{bet}")
            ],
            [
                InlineKeyboardButton(text="üü£ –†–æ–∑–æ–≤—ã–π", callback_data=f"dice_color_pink_{bet}"),
                InlineKeyboardButton(text="‚ö´ –ß–µ—Ä–Ω—ã–π", callback_data=f"dice_color_black_{bet}"),
                InlineKeyboardButton(text="üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π", callback_data=f"dice_color_brown_{bet}")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_dice")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞ –ö—É–±–∏–∫–∏–∞
        if message_id:
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=select_text, parse_mode="Markdown")
            await bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=media,
                reply_markup=color_keyboard
            )
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=select_text, reply_markup=color_keyboard, parse_mode="Markdown")

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É", reply_markup=get_back_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥—É—ç–ª–∏
async def duel_confirm_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    bet = float(data[2])

    user = callback_query.from_user

    print(f"–ù–∞—á–∞–ª–æ –¥—É—ç–ª–∏: user={user.id}, bet={bet}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—É–±–∏–∫–∏–æ–≤
    user_dice = random.randint(1, 6)
    bot_dice = random.randint(1, 6)

    # Rigged –ª–æ–≥–∏–∫–∞: —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ DUEL_WIN_CHANCE%
    win_chance = random.random() < (DUEL_WIN_CHANCE / 100)

    if win_chance:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
        if user_dice <= bot_dice:
            user_dice = bot_dice + random.randint(1, 6 - bot_dice) if bot_dice < 6 else 6
    else:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à
        if user_dice >= bot_dice:
            bot_dice = user_dice + random.randint(1, 6 - user_dice) if user_dice < 6 else 6

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä
    await async_update_games_played(user.id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if user_dice > bot_dice:
        # –í—ã–∏–≥—Ä—ã—à
        winnings = bet * DUEL_MULTIPLIER
        await async_update_balance(user.id, winnings)
        result_text = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{winnings}$"
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        await async_update_balance(user.id, -bet)
        result_text = f"üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet}$"

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏: user_dice={user_dice}, bot_dice={bot_dice}, result={result_text}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: results_group_id = {results_group_id}")
    if results_group_id:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥—É—ç–ª–∏ –≤ –≥—Ä—É–ø–ø—É {results_group_id}")
        try:
            username = f"@{user.username}" if user.username else user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if "+" in result_text:
                winnings = result_text.split()[-1]
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            elif "-" in result_text:
                winnings = f"-{bet}$"
                winnings_label = "–ü—Ä–æ–∏–≥—Ä—ã—à"
            else:
                winnings = "0$"
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            group_text = f"""üìé –ò–≥—Ä–∞: –î—É—ç–ª—å
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}
üí≤ {winnings_label}: {winnings}"""
            photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL
            await bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            pass
    else:
        print("–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    # –¢–µ–∫—Å—Ç —Å –∫—É–±–∏–∫–∞–º–∏
    game_text = f"""üé≤ –í–∞—à –∫—É–±–∏–∫: {user_dice}
üé≤ –ö—É–±–∏–∫ –±–æ—Ç–∞: {bot_dice}

{result_text}"""

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤
    result_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="game_duel")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –∏–≥—Ä", callback_data="play")]
    ])

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
    photo_url = WIN_IMAGE_URL if user_dice > bot_dice else LOSE_IMAGE_URL
    try:
        media = InputMediaPhoto(media=photo_url, caption=game_text)
        await bot.edit_message_media(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            media=media,
            reply_markup=result_keyboard
        )
    except:
        await callback_query.message.answer_photo(photo=photo_url, caption=game_text, reply_markup=result_keyboard)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    if results_group_id:
        try:
            username = f"@{user.username}" if user.username else user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if "+" in game_result:
                winnings = game_result.split()[-1]
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            elif "-" in game_result:
                winnings = f"-{bet}$"
                winnings_label = "–ü—Ä–æ–∏–≥—Ä—ã—à"
            else:
                winnings = "0$"
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            group_text = f"""üìé –ò–≥—Ä–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text} {game_result}
üí≤ {winnings_label}: {winnings}"""
            photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL
            await bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            pass
    else:
        print("–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"
async def deposit_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(DepositStates.waiting_for_amount)

    deposit_text = """üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 5, 10.5, 50</i>"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=deposit_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=get_deposit_menu())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(deposit_message_id=callback_query.message.message_id, deposit_chat_id=callback_query.message.chat.id)
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=deposit_text, reply_markup=get_deposit_menu(), parse_mode="HTML")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(deposit_message_id=new_msg.message_id, deposit_chat_id=new_msg.chat.id)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö —Å—É–º–º
async def deposit_amount_handler(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == "dep_custom":
        custom_text = "üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $:"
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=custom_text)
        await callback_query.message.edit_media(media=media, reply_markup=get_deposit_back_button())
        await state.set_state(DepositStates.waiting_for_amount)
        return
    
    amount = int(data.split("_")[1])
    await process_deposit(callback_query, amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
async def process_custom_amount(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

    try:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
        clean_text = ''.join(c for c in message.text.strip() if c.isdigit() or c == '.')

        if not clean_text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É", reply_markup=get_deposit_back_button())
            return

        amount = float(clean_text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", reply_markup=get_deposit_back_button())
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        state_data = await state.get_data()
        deposit_message_id = state_data.get('deposit_message_id')
        deposit_chat_id = state_data.get('deposit_chat_id')

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback_query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user

        fake_callback = FakeCallback(message)
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm_text = f"""üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

‚úÖ –°—É–º–º–∞ –ø—Ä–∏–Ω—è—Ç–∞: {amount}$
‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞..."""

            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=confirm_text, parse_mode="HTML")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
                if deposit_message_id and deposit_chat_id:
                    await bot.edit_message_media(
                        chat_id=deposit_chat_id,
                        message_id=deposit_message_id,
                        media=media,
                        reply_markup=get_deposit_menu()
                    )
                else:
                    await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=confirm_text, reply_markup=get_deposit_menu(), parse_mode="HTML")
            except:
                await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=confirm_text, reply_markup=get_deposit_menu(), parse_mode="HTML")

            await process_deposit(fake_callback, amount, state)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_deposit_back_button())

    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 5.5, 5$)", reply_markup=get_deposit_back_button())

# –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
async def process_deposit(callback_query, amount, state=None):
    user_telegram_id = callback_query.from_user.id
    user_db = await async_get_user(user_telegram_id)

    if not user_db:
        try:
            if hasattr(callback_query, 'message') and callback_query.message:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
            else:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        except:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_button())
        return

    user_id = user_db[0]

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Crypto Bot
    invoice = crypto_bot.create_invoice(amount)

    if not invoice or not invoice.get('result'):
        try:
            if hasattr(callback_query, 'message') and callback_query.message:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", reply_markup=get_back_button())
            else:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", reply_markup=get_back_button())
        except:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", reply_markup=get_back_button())
        return

    invoice_data = invoice['result']
    invoice_id = invoice_data.get('invoice_id')
    pay_url = invoice_data.get('pay_url')

    if not invoice_id or not pay_url:
        try:
            if hasattr(callback_query, 'message') and callback_query.message:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=get_back_button())
            else:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=get_back_button())
        except:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=get_back_button())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    await async_db.create_payment(user_id, amount, invoice_id, callback_query.message.message_id, callback_query.message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    pay_text = f"""üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}$

‚úÖ –°—É–º–º–∞ –ø—Ä–∏–Ω—è—Ç–∞: {amount}$
–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."""

    pay_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)]
    ])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if hasattr(callback_query, 'message') and callback_query.message:
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=pay_text, parse_mode="Markdown")
            await callback_query.message.edit_media(media=media, reply_markup=pay_keyboard)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            if state:
                await state.update_data(payment_message_id=callback_query.message.message_id, payment_chat_id=callback_query.message.chat.id, payment_invoice_id=invoice_id)
        else:
            await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=pay_text, reply_markup=pay_keyboard, parse_mode="Markdown")
    except:
        try:
            await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=pay_text, reply_markup=pay_keyboard, parse_mode="Markdown")
        except:
            if hasattr(callback_query, 'message') and callback_query.message:
                await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=pay_text, reply_markup=pay_keyboard, parse_mode="Markdown")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async def check_payment(callback_query: types.CallbackQuery):
    invoice_id = callback_query.data.split("_")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    invoices_data = crypto_bot.get_invoices([invoice_id])

    if not invoices_data or not invoices_data.get('result') or not invoices_data['result'].get('items'):
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    invoice_item = invoices_data['result']['items'][0]
    invoice_status = invoice_item['status']

    if invoice_status == 'paid':
        print(f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: invoice_id={invoice_id}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î –ø–æ invoice_id –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        payment = await async_get_payment_by_invoice(invoice_id)

        if not payment:
            print(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: invoice_id={invoice_id}")
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_id, amount, payment_status = payment
        print(f"–ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: user_id={user_id}, amount={amount}, status={payment_status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if payment_status == 'paid':
            print(f"–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: invoice_id={invoice_id}")
            await callback_query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ user_id –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        telegram_id = await async_get_telegram_id_by_user_id(user_id)

        if not telegram_id:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: user_id={user_id}")
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        print(f"–ù–∞–π–¥–µ–Ω telegram_id: {telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—Ç –∂–µ
        if telegram_id != callback_query.from_user.id:
            print(f"–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ telegram_id: expected {telegram_id}, got {callback_query.from_user.id}")
            await callback_query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂", show_alert=True)
            return

        # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ db
        await async_update_balance(telegram_id, amount)
        await invalidate_balance_cache(telegram_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä, –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (0.3$ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞ —Å—É–º–º—É >= 2$)
        user_data = await async_get_user(telegram_id)
        if (user_data and len(user_data) > 9 and user_data[9] and  # referrer_id exists
            (len(user_data) <= 10 or user_data[10] == 0) and    # referral_bonus_given == 0
            amount >= REFERRAL_MIN_DEPOSIT):                    # —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
            referrer_id = user_data[9]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: referrer_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ user_data[9]
            referral_bonus = REFERRAL_BONUS
            await async_update_referral_balance(referrer_id, referral_bonus)
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            await async_log_action(referrer_id, "referral_bonus", referral_bonus, f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {telegram_id} –ø–æ–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ {amount}$")
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –±–æ–Ω—É—Å —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await async_mark_referral_bonus_given(telegram_id)
            print(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: referrer_id={referrer_id}, bonus={referral_bonus}, deposit_amount={amount}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        await async_update_payment_status(invoice_id, 'paid')

        print(f"–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã: telegram_id={telegram_id}, amount={amount}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        success_text = f"""‚úÖ <b>–û–ü–õ–ê–¢–ê –£–°–ü–ï–®–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!</b>

üí∞ –°—É–º–º–∞: <code>{amount}$</code>
üíé –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å

<i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</i>"""

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é
            welcome_text, parse_mode = await get_welcome_text(callback_query.from_user)
            media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=welcome_text, parse_mode=parse_mode)
            await callback_query.message.edit_media(media=media, reply_markup=get_main_menu())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text, parse_mode = await get_welcome_text(callback_query.from_user)
            await callback_query.message.answer_photo(
                photo=BACKGROUND_IMAGE_URL,
                caption=welcome_text,
                reply_markup=get_main_menu(),
                parse_mode=parse_mode
            )

        await callback_query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã", show_alert=True)

    else:
        await callback_query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
async def withdraw_referral_handler(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    referral_balance = round(float(user_data[5]), 2) if user_data and user_data[5] is not None else 0

    if referral_balance <= 0:
        await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
    await async_update_balance(user.id, referral_balance)
    await async_update_referral_balance(user.id, -referral_balance)
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    await async_log_action(user.id, "referral_withdraw", referral_balance, f"–ü–µ—Ä–µ–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å")

    await callback_query.answer(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ ({referral_balance}$) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await referral_handler(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –ì—Ä—É–ø–ø—ã"
async def groups_handler(callback_query: types.CallbackQuery):
    groups_text = """üë• <b>–ù–∞—à–∏ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã</b>

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!
<blockquote>ps: —Ç–∞–º –¥–∞—é—Ç —á–∞—Å—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥—ã</blockquote>"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=groups_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=get_groups_menu())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=groups_text, reply_markup=get_groups_menu(), parse_mode="HTML")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã"
async def promo_codes_handler(callback_query: types.CallbackQuery):
    promo_text = """üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>

–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å!

üí° <i>–ü—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</i>"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=promo_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=get_promo_menu())
    except:
        await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=promo_text, reply_markup=get_promo_menu(), parse_mode="HTML")
    try:
        await callback_query.answer()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
async def activate_promo_handler(callback_query: types.CallbackQuery, state: FSMContext):
    activate_text = """üé´ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=activate_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
        message_id = callback_query.message.message_id
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=activate_text, reply_markup=get_back_button(), parse_mode="HTML")
        message_id = new_msg.message_id

    await state.set_state(PromoStates.waiting_for_promo_code)
    await state.update_data(message_id=message_id)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∏ –í—ã–≤–µ—Å—Ç–∏"
async def withdraw_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user = callback_query.from_user
    user_data = await async_get_user(user.id)
    balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

    if balance <= 0:
        await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return

    await state.set_state(WithdrawStates.waiting_for_withdraw_amount)

    withdraw_text = f"""üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

    üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}$</code>

    üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ $:

    <i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 2$</i>
    <i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: —Å—ã–≥—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 –∏–≥—Ä—É</i>
    <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ @CryptoBot</i>"""

    try:
        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=withdraw_text, parse_mode="HTML")
        await callback_query.message.edit_media(media=media, reply_markup=get_back_button())
        message_id = callback_query.message.message_id
    except:
        new_msg = await callback_query.message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=withdraw_text, reply_markup=get_back_button(), parse_mode="HTML")
        message_id = new_msg.message_id

    await state.update_data(message_id=message_id)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
async def withdraw_amount_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    try:
        amount = float(message.text.strip())
        if amount <= 0:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')

            error_text = """‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>

–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"""

            if message_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=message.chat.id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

        if amount < 2:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = await state.get_data()
            message_id = data.get('message_id')

            error_text = """‚ùå <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 2$</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 2$"""

            if message_id:
                try:
                    media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                    await bot.edit_message_media(
                        chat_id=message.chat.id,
                        message_id=message_id,
                        media=media,
                        reply_markup=get_back_button()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            else:
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
            return

    except ValueError:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        message_id = data.get('message_id')

        error_text = """‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5)"""

        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_back_button()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await async_get_user(message.from_user.id)
    balance = round(float(user_data[3]), 2) if user_data and user_data[3] is not None else 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—ã–≥—Ä–∞–ª —Ö–æ—Ç—è –±—ã 1 –∏–≥—Ä—É
    games_played = user_data[8] if user_data and len(user_data) > 8 and user_data[8] is not None else 0
    if games_played < 1:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        message_id = data.get('message_id')

        error_text = """‚ùå <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>

–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—ã–≥—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 –∏–≥—Ä—É

<i>–°—ã–≥—Ä–∞–π—Ç–µ –≤ –ª—é–±—É—é –∏–≥—Ä—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i>"""

        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_back_button()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        return

    if amount > balance:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        message_id = data.get('message_id')

        error_text = f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>

–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}$</code>
–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: <code>{amount}$</code>

<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞</i>"""

        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_back_button()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=get_back_button(), parse_mode="HTML")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    user_id = user_data[0]
    withdrawal_id = await async_create_withdrawal(user_id, amount, "crypto_bot_wallet")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
    bot_balance = crypto_bot.get_balance("USDT")
    if bot_balance and bot_balance.get('result'):
        # result - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –Ω–∞—Ö–æ–¥–∏–º USDT
        usdt_balance = None
        for currency in bot_balance['result']:
            if currency.get('currency_code') == 'USDT':
                usdt_balance = currency
                break

        if usdt_balance:
            available_balance = float(usdt_balance.get('available', 0))
            if available_balance < amount:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –±–æ—Ç–∞
                await async_update_withdrawal_status(withdrawal_id, 'failed')
                error_text = """‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞</b>

–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."""

                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                data = await state.get_data()
                message_id = data.get('message_id')

                if message_id:
                    try:
                        media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                        await bot.edit_message_media(
                            chat_id=message.chat.id,
                            message_id=message_id,
                            media=media,
                            reply_markup=get_main_menu()
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=error_text, reply_markup=get_main_menu(), parse_mode="HTML")
                else:
                    await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=error_text, reply_markup=get_main_menu(), parse_mode="HTML")
                return
        else:
            # –ù–µ –Ω–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å USDT
            print("–ù–µ –Ω–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å USDT –≤ –æ—Ç–≤–µ—Ç–µ API")

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
    await async_update_balance(message.from_user.id, -amount)
    await invalidate_balance_cache(message.from_user.id)

    print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: user_id={message.from_user.id}, amount={amount}, withdrawal_id={withdrawal_id}")

    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Crypto Bot –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∫–∞–∫ user_id –¥–ª—è Crypto Bot
    transfer_result = crypto_bot.create_transfer(
        user_id=message.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∫–∞–∫ ID –≤ Crypto Bot
        asset="USDT",
        amount=amount,  # –ë–µ–∑ str(), –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
        spend_id=f"withdraw_{withdrawal_id}",
        comment=None,  # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        disable_send_notification=False
    )

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: {transfer_result}")

    if transfer_result and isinstance(transfer_result, dict) and transfer_result.get('result'):
        transfer_data = transfer_result['result']
        transfer_id = transfer_data.get('transfer_id')
        await async_update_withdrawal_status(withdrawal_id, 'completed', transfer_id)

        success_text = f"""‚úÖ <b>–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>

üí∞ –°—É–º–º–∞: <code>{amount}$</code>
ü§ñ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ @CryptoBot

üìã ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{withdrawal_id}</code>

üí° <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç</b>"""

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        message_id = data.get('message_id')

        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=success_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_main_menu()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=success_text, reply_markup=get_main_menu(), parse_mode="HTML")
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=success_text, reply_markup=get_main_menu(), parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await async_update_balance(message.from_user.id, amount)
        await invalidate_balance_cache(message.from_user.id)
        await async_update_withdrawal_status(withdrawal_id, 'failed')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        error_details = transfer_result if isinstance(transfer_result, str) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "METHOD_DISABLED" in error_details:
            solution = """1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @CryptoBot
2. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
3. –í–∫–ª—é—á–∏—Ç–µ –º–µ—Ç–æ–¥ "Transfer" –≤ —Ä–∞–∑–¥–µ–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–Ω–æ–≤–∞"""
        else:
            solution = """1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @CryptoBot
2. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–Ω–æ–≤–∞"""

        error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.
<b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</b> {error_details}

üí° <b>–†–µ—à–µ–Ω–∏–µ:</b>
{solution}

–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."""

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        message_id = data.get('message_id')

        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_main_menu()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(error_text, reply_markup=get_main_menu(), parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=get_main_menu(), parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ VIP –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: transfer_result={transfer_result}, type={type(transfer_result)}")
    if transfer_result and isinstance(transfer_result, dict) and transfer_result.get('result'):
        print(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ VIP –≥—Ä—É–ø–ø—ã: vip_group_id = {vip_group_id}, type = {type(vip_group_id)}")
        if vip_group_id:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ –≤ VIP –≥—Ä—É–ø–ø—É {vip_group_id}")
            try:
                username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                winnings = f"{amount}$"
                winnings_label = "–í—ã–≤–æ–¥"
                group_text = f"""üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—É–º–º–∞: {amount}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ
üí≤ {winnings_label}: {winnings}"""
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {vip_group_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {group_text}")
                result = await bot.send_message(chat_id=vip_group_id, text=group_text)
                pass
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ VIP –≥—Ä—É–ø–ø—É: {e}")
                import traceback
                traceback.print_exc()
        else:
            print("VIP –≥—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("–£—Å–ª–æ–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    await state.clear()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ñ–æ–Ω–µ
async def process_payment_async(telegram_id, amount):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞"""
    try:
        # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await async_update_balance(telegram_id, amount)
        await invalidate_balance_cache(telegram_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä
        user_data = await async_get_user(telegram_id)
        if (user_data and len(user_data) > 9 and user_data[9] and  # referrer_id exists
            (len(user_data) <= 10 or user_data[10] == 0) and    # referral_bonus_given == 0
            amount >= REFERRAL_MIN_DEPOSIT):                    # —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
            referrer_id = user_data[9]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: referrer_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ user_data[9]
            referral_bonus = REFERRAL_BONUS
            await async_update_referral_balance(referrer_id, referral_bonus)
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –±–æ–Ω—É—Å —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await async_mark_referral_bonus_given(telegram_id)
            print(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: referrer_id={referrer_id}, bonus={referral_bonus}, deposit_amount={amount}")

    except Exception as e:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

async def async_mark_referral_bonus_given(telegram_id):
    """–û—Ç–º–µ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∫–∞–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ"""
    await async_db.mark_referral_bonus_given(telegram_id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ pending –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_pending_payments(telegram_id):
    pending_payments = await async_get_pending_payments(telegram_id)

    for (invoice_id,) in pending_payments:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
            invoices_data = crypto_bot.get_invoices([invoice_id])

            if invoices_data and invoices_data.get('result') and invoices_data['result'].get('items'):
                invoice_item = invoices_data['result']['items'][0]
                invoice_status = invoice_item['status']

                if invoice_status == 'paid':
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    amount = await async_get_payment_amount_by_invoice(invoice_id)

                    if amount is not None:
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
                        await process_payment_async(telegram_id, amount)
                        await async_update_payment_status(invoice_id, 'paid')

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ
                        await update_payment_message_success(invoice_id, telegram_id, amount)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
            await asyncio.sleep(1)

        except Exception as e:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
async def other_callbacks(callback_query: types.CallbackQuery):
    await callback_query.answer("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –ö—É–±–∏–∫–∏–∞
async def dice_color_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    color = data[2]
    bet = float(data[3])

    user = callback_query.from_user

    print(f"–ù–∞—á–∞–ª–æ –∫—É–±–∏–∫–æ–≤: user={user.id}, bet={bet}, color={color}")

    # –¶–≤–µ—Ç–∞ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    color_to_number = {
        "red": 1,
        "green": 2,
        "blue": 3,
        "pink": 4,
        "black": 5,
        "brown": 6
    }
    number_to_color = {
        1: ("üî¥ –ö—Ä–∞—Å–Ω—ã–π", "red"),
        2: ("üü¢ –ó–µ–ª–µ–Ω—ã–π", "green"),
        3: ("üîµ –°–∏–Ω–∏–π", "blue"),
        4: ("üü£ –†–æ–∑–æ–≤—ã–π", "pink"),
        5: ("‚ö´ –ß–µ—Ä–Ω—ã–π", "black"),
        6: ("üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π", "brown")
    }

    chosen_number = color_to_number[color]
    chosen_color_text = number_to_color[chosen_number][0]

    # –ë—Ä–æ—Å–æ–∫ –ö—É–±–∏–∫–∏–∞
    dice_result = random.randint(1, 6)

    # Rigged –ª–æ–≥–∏–∫–∞: —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ DICE_WIN_CHANCE%
    win_chance = random.random() < (DICE_WIN_CHANCE / 100)

    if win_chance:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
        dice_result = chosen_number
    else:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à
        if dice_result == chosen_number:
            dice_result = (chosen_number % 6) + 1

    result_color_text = number_to_color[dice_result][0]

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä
    await async_update_games_played(user.id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if dice_result == chosen_number:
        # –í—ã–∏–≥—Ä—ã—à
        winnings = bet * DICE_MULTIPLIER
        await async_update_balance(user.id, winnings)
        result_text = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{winnings}$"
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        await async_update_balance(user.id, -bet)
        result_text = f"üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet}$"

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–æ–≤: chosen_number={chosen_number}, dice_result={dice_result}, result_text={result_text}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: results_group_id = {results_group_id}")
    if results_group_id:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—É–±–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É {results_group_id}")
        try:
            username = f"@{user.username}" if user.username else user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if "+" in result_text:
                winnings = result_text.split()[-1]
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            elif "-" in result_text:
                winnings = f"-{bet}$"
                winnings_label = "–ü—Ä–æ–∏–≥—Ä—ã—à"
            else:
                winnings = "0$"
                winnings_label = "–í—ã–∏–≥—Ä—ã—à"
            group_text = f"""üìé –ò–≥—Ä–∞: –ö—É–±–∏–∫–∏
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üí∞ –°—Ç–∞–≤–∫–∞: {bet}$
‚ö°–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}
üí≤ {winnings_label}: {winnings}"""
            photo_url = WIN_IMAGE_URL if winnings_label == "–í—ã–∏–≥—Ä—ã—à" else LOSE_IMAGE_URL
            await bot.send_photo(chat_id=results_group_id, photo=photo_url, caption=group_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            pass
    else:
        print("–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    # –¢–µ–∫—Å—Ç —Å –ö—É–±–∏–∫–∏–æ–º
    game_text = f"""üé≤ –í–µ—Ä–Ω—ã–π –ö—É–±–∏–∫–∏: {result_color_text}
‚ôªÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_color_text}

{result_text}"""

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤
    result_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="game_dice")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –∏–≥—Ä", callback_data="play")]
    ])

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
    photo_url = WIN_IMAGE_URL if dice_result == chosen_number else LOSE_IMAGE_URL
    try:
        media = InputMediaPhoto(media=photo_url, caption=game_text)
        await bot.edit_message_media(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            media=media,
            reply_markup=result_keyboard
        )
    except:
        await callback_query.message.answer_photo(photo=photo_url, caption=game_text, reply_markup=result_keyboard)

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def promo_code_handler(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    promo_code = message.text.strip().upper()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    message_id = data.get('message_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_data = await async_get_promo_code(promo_code)

    if not promo_data:
        error_text = """‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."""

        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_promo_menu()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=error_text, reply_markup=get_promo_menu(), parse_mode="HTML")
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=error_text, reply_markup=get_promo_menu(), parse_mode="HTML")

        await state.clear()
        return

    promo_id, code, reward_amount, max_activations, current_activations, expires_at, created_by, created_at = promo_data

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    success, amount_or_error = await async_activate_promo_code(promo_id, message.from_user.id)

    if success:
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        await async_update_balance(message.from_user.id, amount_or_error)
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await async_log_action(message.from_user.id, "promo_activation", amount_or_error, f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code}")

        success_text = f"""üé´ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!</b>

üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: <code>{amount_or_error}$</code>

üéØ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""

        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=success_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_promo_menu()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=success_text, reply_markup=get_promo_menu(), parse_mode="HTML")
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=success_text, reply_markup=get_promo_menu(), parse_mode="HTML")
    else:
        error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>

{amount_or_error}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=error_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=media,
                    reply_markup=get_promo_menu()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=error_text, reply_markup=get_promo_menu(), parse_mode="HTML")
        else:
            await message.answer_photo(photo=BACKGROUND_IMAGE_URL, caption=error_text, reply_markup=get_promo_menu(), parse_mode="HTML")

    await state.clear()

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–≥—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
async def game_placeholder_handler(callback_query: types.CallbackQuery):
    game = callback_query.data.split("_")[1]
    game_names = {
        "dice": "–ö—É–±–∏–∫–∏",
        "darts": "–î–∞—Ä—Ç—Å"
    }
    game_name = game_names.get(game, game.capitalize())
    await callback_query.answer(f"üéÆ {game_name} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers():
    if dp:
        # –ö–æ–º–∞–Ω–¥—ã
        dp.message.register(start_command, Command(commands=['start', 'restart']))
        dp.message.register(give_command, Command(commands=['give']))
        dp.message.register(panel_command, Command(commands=['panel']))
        dp.message.register(tasks_command, Command(commands=['tasks']))
        dp.message.register(setgroup_command, Command(commands=['setgroup']))
        dp.message.register(setvip_command, Command(commands=['setvip']))
        dp.message.register(getgroup_command, Command(commands=['getgroup']))
        dp.message.register(getvip_command, Command(commands=['getvip']))
        dp.message.register(getgroups_command, Command(commands=['getgroups']))
        dp.message.register(setwebhook_command, Command(commands=['setwebhook']))
        dp.message.register(getwebhook_command, Command(commands=['getwebhook']))
        dp.message.register(createpromo_command, Command(commands=['createpromo']))
        dp.message.register(listpromo_command, Command(commands=['listpromo']))
        dp.message.register(logs_command, Command(commands=['logs']))
        dp.message.register(stats_command, Command(commands=['stats']))
        dp.message.register(set_command, Command(commands=['set']))

        # Callback –∫–Ω–æ–ø–æ–∫
        dp.callback_query.register(back_to_main, lambda c: c.data == "back_to_main")
        dp.callback_query.register(daily_bonus_handler, lambda c: c.data == "daily_bonus")
        dp.callback_query.register(profile_handler, lambda c: c.data == "profile")
        dp.callback_query.register(play_handler, lambda c: c.data == "play")
        dp.callback_query.register(referral_handler, lambda c: c.data == "referral")
        dp.callback_query.register(rating_handler, lambda c: c.data == "rating")
        dp.callback_query.register(chances_handler, lambda c: c.data == "chances")
        dp.callback_query.register(admin_panel_handler, lambda c: c.data == "admin_panel")
        dp.callback_query.register(admin_chances_handler, lambda c: c.data == "admin_chances")
        dp.callback_query.register(admin_multiplier_handler, lambda c: c.data == "admin_multiplier")
        dp.callback_query.register(admin_stats_handler, lambda c: c.data == "admin_stats")
        dp.callback_query.register(admin_set_balance_handler, lambda c: c.data == "admin_set_balance")
        dp.callback_query.register(edit_chance_duel_handler, lambda c: c.data == "edit_chance_duel")
        dp.callback_query.register(edit_chance_dice_handler, lambda c: c.data == "edit_chance_dice")
        dp.callback_query.register(edit_chance_basketball_handler, lambda c: c.data == "edit_chance_basketball")
        dp.callback_query.register(edit_chance_slots_handler, lambda c: c.data == "edit_chance_slots")
        dp.callback_query.register(edit_chance_blackjack_handler, lambda c: c.data == "edit_chance_blackjack")
        dp.callback_query.register(edit_multiplier_duel_handler, lambda c: c.data == "edit_multiplier_duel")
        dp.callback_query.register(edit_multiplier_basketball_handler, lambda c: c.data == "edit_multiplier_basketball")
        dp.callback_query.register(edit_multiplier_slots_handler, lambda c: c.data == "edit_multiplier_slots")
        dp.callback_query.register(edit_multiplier_dice_handler, lambda c: c.data == "edit_multiplier_dice")
        dp.callback_query.register(edit_multiplier_blackjack_handler, lambda c: c.data == "edit_multiplier_blackjack")
        dp.callback_query.register(duel_handler, lambda c: c.data == "game_duel")
        dp.callback_query.register(dice_handler, lambda c: c.data == "game_dice")
        dp.callback_query.register(dice_color_handler, lambda c: c.data.startswith("dice_color_"))
        dp.callback_query.register(basketball_handler, lambda c: c.data == "game_basketball")
        dp.callback_query.register(basketball_predict_hit_handler, lambda c: c.data.startswith("basketball_predict_hit_"))
        dp.callback_query.register(slots_handler, lambda c: c.data == "game_slots")
        dp.callback_query.register(blackjack_handler, lambda c: c.data == "game_blackjack")
        dp.callback_query.register(slots_spin_handler, lambda c: c.data.startswith("slots_spin_"))
        dp.callback_query.register(blackjack_hit_handler, lambda c: c.data.startswith("blackjack_hit_"))
        dp.callback_query.register(blackjack_stand_handler, lambda c: c.data.startswith("blackjack_stand_"))
        dp.callback_query.register(game_placeholder_handler, lambda c: c.data.startswith("game_") and c.data not in ["game_duel", "game_dice", "game_slots", "game_basketball", "game_blackjack"])
        dp.callback_query.register(duel_confirm_handler, lambda c: c.data.startswith("duel_confirm_"))
        dp.callback_query.register(withdraw_referral_handler, lambda c: c.data == "withdraw_referral")
        dp.callback_query.register(deposit_handler, lambda c: c.data == "deposit")
        dp.callback_query.register(deposit_amount_handler, lambda c: c.data.startswith("dep_"))
        dp.callback_query.register(withdraw_handler, lambda c: c.data == "withdraw")
        dp.callback_query.register(groups_handler, lambda c: c.data == "groups")
        dp.callback_query.register(promo_codes_handler, lambda c: c.data == "promo_codes")
        dp.callback_query.register(activate_promo_handler, lambda c: c.data == "activate_promo")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        dp.callback_query.register(edit_profile_handler, lambda c: c.data == "edit_profile")
        dp.callback_query.register(detailed_stats_handler, lambda c: c.data == "detailed_stats")
        dp.callback_query.register(transaction_history_handler, lambda c: c.data == "transaction_history")
        dp.callback_query.register(profile_settings_handler, lambda c: c.data == "profile_settings")
        dp.callback_query.register(change_username_handler, lambda c: c.data == "change_username")
        dp.callback_query.register(change_avatar_handler, lambda c: c.data == "change_avatar")
        dp.callback_query.register(progress_charts_handler, lambda c: c.data == "progress_charts")

        dp.callback_query.register(other_callbacks)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        dp.message.register(process_custom_amount, StateFilter(DepositStates.waiting_for_amount))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ –¥—É—ç–ª–∏
        dp.message.register(duel_bet_handler, StateFilter(DuelStates.waiting_for_bet))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª
        dp.message.register(basketball_bet_handler, StateFilter(BasketballStates.waiting_for_bet))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–æ—Ç—ã
        dp.message.register(slots_bet_handler, StateFilter(SlotsStates.waiting_for_bet))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ blackjack
        dp.message.register(blackjack_bet_handler, StateFilter(BlackjackStates.waiting_for_bet))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ –ö—É–±–∏–∫–∏–µ
        dp.message.register(dice_bet_handler, StateFilter(DiceStates.waiting_for_bet))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —à–∞–Ω—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        dp.message.register(set_duel_chance_handler, StateFilter(AdminStates.waiting_for_duel_chance))
        dp.message.register(set_basketball_chance_handler, StateFilter(AdminStates.waiting_for_basketball_chance))
        dp.message.register(set_slots_chance_handler, StateFilter(AdminStates.waiting_for_slots_chance))
        dp.message.register(set_blackjack_chance_handler, StateFilter(AdminStates.waiting_for_blackjack_chance))
        dp.message.register(set_dice_chance_handler, StateFilter(AdminStates.waiting_for_dice_chance))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        dp.message.register(set_duel_multiplier_handler, StateFilter(AdminStates.waiting_for_duel_multiplier))
        dp.message.register(set_basketball_multiplier_handler, StateFilter(AdminStates.waiting_for_basketball_multiplier))
        dp.message.register(set_slots_multiplier_handler, StateFilter(AdminStates.waiting_for_slots_multiplier))
        dp.message.register(set_blackjack_multiplier_handler, StateFilter(AdminStates.waiting_for_blackjack_multiplier))
        dp.message.register(set_dice_multiplier_handler, StateFilter(AdminStates.waiting_for_dice_multiplier))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
        dp.message.register(withdraw_amount_handler, StateFilter(WithdrawStates.waiting_for_withdraw_amount))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        dp.message.register(promo_code_handler, StateFilter(PromoStates.waiting_for_promo_code))

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ
async def update_payment_message_success(invoice_id, telegram_id, amount, message_id=None, chat_id=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –∏ message_id
        payment = await async_get_payment_by_invoice(invoice_id)
        if not payment:
            print(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: invoice_id={invoice_id}")
            return

        user_id, db_amount, status, db_message_id, db_chat_id = payment
        final_amount = amount if amount is not None else db_amount

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_id –∏ chat_id –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        final_message_id = message_id if message_id is not None else db_message_id
        final_chat_id = chat_id if chat_id is not None else db_chat_id

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance, referral_balance = await get_cached_balance(telegram_id)

        # –°–æ–∑–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_text = f"""‚úÖ <b>–û–ü–õ–ê–¢–ê –£–°–ü–ï–®–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!</b>

üí∞ –°—É–º–º–∞: <code>{final_amount}$</code>
üíé –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å

<i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</i>"""

        # –ï—Å–ª–∏ –µ—Å—Ç—å message_id, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if final_message_id and final_chat_id:
            try:
                media = InputMediaPhoto(media=BACKGROUND_IMAGE_URL, caption=success_text, parse_mode="HTML")
                await bot.edit_message_media(
                    chat_id=final_chat_id,
                    message_id=final_message_id,
                    media=media,
                    reply_markup=get_main_menu()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=telegram_id,
                    text=success_text,
                    parse_mode="HTML"
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
            await bot.send_message(
                chat_id=telegram_id,
                text=success_text,
                parse_mode="HTML"
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç CryptoBot
async def process_webhook_payment(invoice_id, status, amount=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç CryptoBot"""
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω webhook: invoice_id={invoice_id}, status={status}, amount={amount}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î –ø–æ invoice_id
        payment = await async_get_payment_by_invoice(invoice_id)

        if not payment:
            print(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: invoice_id={invoice_id}")
            return {"success": False, "error": "Payment not found"}

        user_id, db_amount, payment_status = payment
        print(f"–ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: user_id={user_id}, amount={db_amount}, status={payment_status}")

        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if payment_status == 'paid':
            print(f"–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: invoice_id={invoice_id}")
            return {"success": True, "message": "Payment already processed"}

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'paid', –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if status != 'paid':
            print(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: invoice_id={invoice_id}, status={status}")
            return {"success": False, "error": f"Payment status is {status}, not paid"}

        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ user_id
        telegram_id = await async_get_telegram_id_by_user_id(user_id)

        if not telegram_id:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: user_id={user_id}")
            return {"success": False, "error": "User not found"}

        print(f"–ù–∞–π–¥–µ–Ω telegram_id: {telegram_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ webhook –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ –∏–∑ –ë–î
        final_amount = amount if amount is not None else db_amount
        print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {final_amount}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await process_payment_async(telegram_id, final_amount)
        await async_update_payment_status(invoice_id, 'paid')

        print(f"–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã: telegram_id={telegram_id}, amount={final_amount}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ
        await update_payment_message_success(invoice_id, telegram_id, final_amount)

        return {"success": True, "message": f"Payment processed successfully: {final_amount}$"}

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"success": False, "error": str(e)}

# –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
setup_handlers()